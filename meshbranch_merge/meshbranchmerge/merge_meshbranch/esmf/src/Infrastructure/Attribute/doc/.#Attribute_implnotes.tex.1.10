% $Id$
%
% Earth System Modeling Framework
% Copyright 2002-2009, University Corporation for Atmospheric Research,
% Massachusetts Institute of Technology, Geophysical Fluid Dynamics
% Laboratory, University of Michigan, National Centers for Environmental
% Prediction, Los Alamos National Laboratory, Argonne National Laboratory,
% NASA Goddard Space Flight Center.
% Licensed under the University of Illinois-NCSA License.

This section covers Attribute memory deallocation, the use of {\tt ESMF\_AttributeGet()}, Attribute package nesting capabilities, and issues with Attributes in a distributed environment.  Issues and procedures dealing with Attribute memory deallocation using {\tt ESMF\_AttributeGet()} to retrieve Attribute lists, and nested Attribute package capabilities are discussed to help avoid misuse.  The limitations with Attributes in a distributed environment are also discussed, with an outline of the future work to be done in this area. 

\subsubsection{Attribute Memory Deallocation}

The {\tt ESMF\_Attribute} class presents a somewhat different paradigm with respect to memory deallocation than other ESMF objects.  The {\tt ESMF\_AttributeRemove()} call can be issued to remove any Attribute from an ESMF object or an Attribute package on an ESMF object.  This call is also enabled to remove entire Attribute packages with one call, which would remove any nested Attribute packages as well.  The user is {\bf not} required to remove all Attributes that are used in a model run.  The entire Attribute hierarchy will be removed automatically by the ESMF, provided the ESMF objects which contain them are properly destroyed.  

\subsubsection{Using {\tt ESMF\_AttributeGet()} to retrieve Attribute lists}

The behavior of the {\tt ESMF\_AttributeGet()} routine,when retrieving an Attribute containing a value list, follows a slightly different convention than other similar ESMF routines.  This routine requires the input of a Fortran array as a place to store the retrieved values of the Attribute list.  If the array that is given is longer that the list of Attribute values, the first part of the array will be filled, leaving the extra space untouched.  If, however the array passed in, is shorter than the number of Attribute values, the routine will exit with an {\bf ESMF\_FAILURE} return code.  It is suggested that if it is required by the user to use a Fortran array that is longer than the number of Attribute values returned, only the indices of the array which the user desires to be filleds should be passed into the routine.  
  
\subsubsection{Using Attribute package nesting capabilites}

There is a recommended practice when using nested Attribute packages to organize metadata conventions.  The most general Attribute packages should always be added first, followed by the more specific ones.  For instance, when adding Attribute packages to a Field, it is recommend that the CF convention be added first, followed by the ESG convention, followed by any additional customized Attribute packages.  In a future release the standardized Attribute packages will be added automatically by the ESMF, but until that time this recommendation stands.

Another consideration when using nested Attribute packages is to remember to specify that the nesting capability is desired by setting the {\it attpacknestflag} argument to {\bf ESMF\_ATTPACKNEST\_ON}.  In addition, when a nested Attribute package is removed, every nested Attribute package below the point of removal will also be removed.  Thus, by removing the CF Attribute package on a Field, the ESG and any other customized Attribute packages will also be removed.

\subsubsection{Attributes in a Distributed Environment} 

Attributes which are attached directly to an {\tt ESMF\_State} are not updated when the State is reconciled.  





