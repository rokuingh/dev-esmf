! $Id$
!
! Earth System Modeling Framework
! Copyright 2002-2009, University Corporation for Atmospheric Research, 
! Massachusetts Institute of Technology, Geophysical Fluid Dynamics 
! Laboratory, University of Michigan, National Centers for Environmental 
! Prediction, Los Alamos National Laboratory, Argonne National Laboratory, 
! NASA Goddard Space Flight Center.
! Licensed under the University of Illinois-NCSA License.
!
!==============================================================================
^define ESMF_FILENAME "ESMF_FieldSet.F90"
!==============================================================================
!
!     ESMF FieldSet module
module ESMF_FieldSetMod
!
!==============================================================================
!
! This file contains the FieldSet() methods.
!
!------------------------------------------------------------------------------
! INCLUDES
! < ignore blank lines below.  they are created by the files which
!   define various macros. >
^include "ESMF.h"
#include "ESMF_TypeKindRankMacros.hcppF90"

!------------------------------------------------------------------------------
! !USES:
  use ESMF_UtilTypesMod
  use ESMF_BaseMod
  use ESMF_LogErrMod
  use ESMF_LocalArrayMod
  use ESMF_DistGridMod
  use ESMF_StaggerLocMod
  use ESMF_GridMod
  use ESMF_MeshMod
  use ESMF_LocStreamMod
  use ESMF_GeomBaseMod
  use ESMF_ArrayMod
  use ESMF_ArrayCreateMod
  use ESMF_InitMacrosMod

  use ESMF_FieldMod

  implicit none

!------------------------------------------------------------------------------
! !PRIVATE TYPES:
  private

!------------------------------------------------------------------------------
! !PUBLIC MEMBER FUNCTIONS:

  public ESMF_FieldSet
 
!------------------------------------------------------------------------------
! The following line turns the CVS identifier string into a printable variable.
  character(*), parameter, private :: version = &
    '$Id$'

!==============================================================================
! 
! INTERFACE BLOCKS
!
!==============================================================================


!------------------------------------------------------------------------------
!BOPI
! !IROUTINE: ESMF_FieldSet -- Overloaded FieldSet() interface

! !INTERFACE:
  interface ESMF_FieldSet

! !PRIVATE MEMBER FUNCTIONS:
!
    !module procedure ESMF_FieldSetArray
    !module procedure ESMF_FieldSetLocalArray !TODO: FIELDINTEGRATION
    !module procedure ESMF_FieldSetGrid
    TypeKindRankInterfaceMacro(FieldSetDataPtr)

! !DESCRIPTION: 
! This interface provides a single entry point for the various 
!  types of {\tt ESMF\_FieldSet} subroutines.   
end interface
!EOPI 
!------------------------------------------------------------------------------


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

contains

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldSetArray"
!BOPI
! !IROUTINE: ESMF_FieldSet - Set data Array associated with the Field

! !INTERFACE:
  ! Private name; call using ESMF_FieldSet()
  subroutine ESMF_FieldSetArray(field, array, rc)
!
! !ARGUMENTS:
    type(ESMF_Field), intent(inout) :: field      
    type(ESMF_Array), intent(in) :: array
    integer, intent(out), optional :: rc           
!
! !DESCRIPTION:
! Set data in {\tt ESMF\_Array} form.
!
! The arguments are:
! \begin{description}
! \item [field]
!       An {\tt ESMF\_Field} object.
! \item [{[array]}]
!       {\tt ESMF\_Array} containing data.
! \item [{[rc]}]
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!EOPI
!------------------------------------------------------------------------------
    integer :: localrc
    !character(len=ESMF_MAXSTR) :: str
    type(ESMF_FieldType), pointer :: ftypep

    ! Initialize
    localrc = ESMF_RC_NOT_IMPL
    if (present(rc)) rc = ESMF_RC_NOT_IMPL

    ! check variables
    ESMF_INIT_CHECK_DEEP(ESMF_FieldGetInit,field,rc)

    ftypep => field%ftypep

    if( (ftypep%datastatus .eq. ESMF_STATUS_READY ) .and. &
        ftypep%array_internal) then
        call ESMF_ArrayDestroy(ftypep%array, rc=localrc)
        if (ESMF_LogMsgFoundError(localrc, &
                              ESMF_ERR_PASSTHRU, &
                              ESMF_CONTEXT, rc)) return
    endif
    ftypep%array = array
    ftypep%array_internal = .false.
    ftypep%datastatus = ESMF_STATUS_READY
   
    ! Set return values.
    if (present(rc)) rc = ESMF_SUCCESS
    
  end subroutine ESMF_FieldSetArray
!------------------------------------------------------------------------------


! TODO:FIELDINTEGRATION Restore the FieldSetLocalArray method 
#if 0
!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldSetLocalArray"
!BOPI
! !IROUTINE: ESMF_FieldSet - Set data Array associated with the Field

! !INTERFACE:
  ! Private name; call using ESMF_FieldSet()
  subroutine ESMF_FieldSetLocalArray(field, localarray, rc)

!
! !ARGUMENTS:
    type(ESMF_Field), intent(inout) :: field      
    type(ESMF_LocalArray), intent(in) :: localarray
    integer, intent(out), optional :: rc           

!
! !DESCRIPTION:
! Set data in {\tt ESMF\_LocalArray} form.
!
! The arguments are:
! \begin{description}
! \item [field]
!       An {\tt ESMF\_Field} object.
! \item [{[localarray]}]
!       {\tt ESMF\_LocalArray} containing data.
! \item [{[rc]}]
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!EOPI
!------------------------------------------------------------------------------
    integer :: localrc 
    !character(len=ESMF_MAXSTR) :: str
    type(ESMF_FieldType), pointer :: ftypep
    type(ESMF_Array) :: array

    ! Initialize return code
    localrc = ESMF_RC_NOT_IMPL   
    if (present(rc)) rc = ESMF_RC_NOT_IMPL

    ! check variables
    ESMF_INIT_CHECK_DEEP(ESMF_FieldGetInit,field,rc)

    ftypep => field%ftypep

    ! TODO: do we allow this?  if so, do we just destroy the old array?
    !if (ftypep%arraystatus .eq. ESMF_STATUS_READY) then
    !   if (ESMF_LogMsgFoundError(ESMF_RC_OBJ_BAD, &
    !                          "Data already associated with Field", &
    !                           ESMF_CONTEXT, rc)) return
    !endif

    call ESMF_FieldGetArray(field, array, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                              ESMF_ERR_PASSTHRU, &
                              ESMF_CONTEXT, rc)) return

    call ESMF_ArraySet(array, localarray, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                              ESMF_ERR_PASSTHRU, &
                              ESMF_CONTEXT, rc)) return

    ftypep%arraystatus = ESMF_STATUS_READY
 
    if (present(rc)) rc = ESMF_SUCCESS

  end subroutine ESMF_FieldSetLocalArray
!------------------------------------------------------------------------------
#endif


!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldSetGrid"
!BOPI
! !IROUTINE: ESMF_FieldSet - Set Grid associated with the Field

! !INTERFACE:
  ! Private name; call using ESMF_FieldSet()
  subroutine ESMF_FieldSetGrid(field, grid, rc)
!
! !ARGUMENTS:
    type(ESMF_Field), intent(inout) :: field  
    type(ESMF_Grid), intent(inout) :: grid      
    integer, intent(out), optional :: rc    
!
! !DESCRIPTION:
! Used only with the version of {\tt ESMF\_FieldCreate} which creates an empty 
! {\tt ESMF\_Field} and allows the {\tt ESMF\_Grid} to be specified later.  
! Otherwise it is an error to try to change the {\tt ESMF\_Grid} 
! associated with an {\tt ESMF\_Field}.
!
! The arguments are:
! \begin{description}
! \item [field]
!       An {\tt ESMF\_Field} object.
! \item [grid]
!       {\tt ESMF\_Grid} to be added.
! \item [{[rc]}]
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!EOPI
!------------------------------------------------------------------------------
    type(ESMF_FieldType), pointer :: ftype
    logical :: had_grid
    integer :: localrc

    ! Initialize
    localrc = ESMF_RC_NOT_IMPL
    if (present(rc)) rc = ESMF_RC_NOT_IMPL

    ! check variables
    ESMF_INIT_CHECK_DEEP(ESMF_FieldGetInit,field,rc)

    ftype => field%ftypep

#if 0

    ! decide if we're regridding or just adding a grid to a partially
    ! created field.
    had_grid = .FALSE.
    if (ftype%gridstatus .eq. ESMF_STATUS_READY) had_grid = .TRUE.

    if (.not. had_grid) then
       ! if no grid, just add it
       ftype%grid = grid
       ftype%gridstatus = ESMF_STATUS_READY
    else
       ! this could be considered a request to regrid the data
       call ESMF_LogWrite("Replacing existing grid not yet supported", &
                           ESMF_LOG_WARNING, &
                           ESMF_CONTEXT)
       call ESMF_LogWrite("Will be considered a regrid request", &
                           ESMF_LOG_WARNING, &
                           ESMF_CONTEXT)
    endif

    ! now validate again to be sure that if the field had an existing
    ! array or datamap, that we haven't created an inconsistent object
    call ESMF_FieldValidate(field, "", rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                              ESMF_ERR_PASSTHRU, &
                              ESMF_CONTEXT, rc)) return
#endif

    if (present(rc)) rc = ESMF_SUCCESS

  end subroutine ESMF_FieldSetGrid
!------------------------------------------------------------------------------


#define FieldSetDataPtrDoc() \
!---------------------------------------------------------------------------- @\
!BOPI @\
! !IROUTINE: ESMF_FieldSet - Add data to a field directly by Fortran pointer @\
! @\
! !INTERFACE: @\
! ! Private name; call using ESMF_FieldSet() @\
! subroutine ESMF_FieldSetDataPtr<rank><type><kind>(field, & @\
!   dataptr, copyflag, indexflag, rc) @\
! @\
! !ARGUMENTS: @\
!   type(ESMF_Field), intent(inout) :: field @\
!   <type> (ESMF_KIND_<kind>), dimension(<rank>), pointer :: dataptr @\
!   integer, intent(in), optional :: staggerloc  @\
!   type(ESMF_CopyFlag), intent(in), optional :: copyflag @\
!   type(ESMF_IndexFlag), intent(in), optional :: indexflag  @\
!   integer, intent(out), optional :: rc   @\
! @\
! !DESCRIPTION: @\
! Set data in an {\tt ESMF\_Field} directly from a Fortran pointer. @\
! Valid type/kind/rank combinations supported by the @\
! framework are: ranks 1 to 7, type real of kind *4 or *8, @\
! and type integer of kind *1, *2, *4, or *8. @\
! @\
! The arguments are: @\
! \begin{description} @\
! \item[field] @\
!  The {\tt ESMF\_Field} to query. @\
! \item[dataptr] @\
!  An associated Fortran pointer of the proper Type, Kind, and Rank as @\
!  the data in the Field.  When this call returns successfully, the pointer @\
!  will now point to the data in the Field.  This is either a reference or @\
!  a copy, depending on the setting of the following argument.  @\
! \item[{[copyflag]}] @\
!  Defaults to {\tt ESMF\_DATA\_REF}.  If set to {\tt ESMF\_DATA\_COPY}, @\
!  a separate copy of the data will be allocated and the pointer will point @\
!  at the copy.  If a new copy of the data is made, the caller is @\
!  responsible for deallocating the space. @\
! \item[{[staggerloc]}] @\
!  Defaults to 0.  If specified, the staggerloc specifies the relative position of @\
!  data array and grid. @\
! \item[{[indexflag]}] @\
!  See Section~\ref{opt:indexflag} for possible values.  Defaults @\
!  to {\tt ESMF\_INDEX\_DELOCAL}.  If set to @\
!  {\tt ESMF\_INDEX\_GLOBAL} and the {\tt ESMF\_Grid} associated with the @\
!  {\tt ESMF\_Field} is regular, then the lower bounds and upper bounds will @\
!  be allocated with global index numbers corresponding to the grid. @\
! \item[{[rc]}] @\
!   Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
! \end{description} @\
! @\
!EOPI @\
!---------------------------------------------------------------------------- @\

#define FieldSetDataPtrMacro(mname, mtypekind, mrank, mdim, mlen, mrng, mloc) \
!---------------------------------------------------------------------------- @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_FieldSetDataPtr" @\
  subroutine ESMF_FieldSetDataPtr##mrank##D##mtypekind(field, & @\
    dataptr, copyflag, staggerloc, indexflag, rc) @\
@\
    type(ESMF_Field), intent(inout) :: field @\
    mname (ESMF_KIND_##mtypekind), dimension(mdim), pointer :: dataptr @\
    type(ESMF_CopyFlag), intent(in), optional :: copyflag @\
    integer, intent(in), optional :: staggerloc  @\
    type(ESMF_IndexFlag), intent(in), optional :: indexflag @\
    integer, intent(out), optional :: rc   @\
@\
    ! Local variables @\
    type(ESMF_Array) :: array, newarray  ! array object @\
    integer :: localrc                   ! local error status @\
    logical :: rcpresent                 ! did user specify rc? @\
@\
    type(ESMF_DistGrid) :: distgrid    ! distgrid in field%grid @\
    integer, dimension(mrank) :: comp_edge_u_width @\
@\
    ! Initialize return code assume routine not implemented @\
    localrc = ESMF_RC_NOT_IMPL @\
    rcpresent = .FALSE. @\
@\
    if (present(rc)) then @\
      rcpresent = .TRUE. @\
      rc = ESMF_RC_NOT_IMPL @\
    endif @\
@\
    ! check variables @\
    ESMF_INIT_CHECK_DEEP(ESMF_FieldGetInit,field,rc) @\
@\
    ! Test to see if pointer already associated, and fail if not so. @\
    if (.not.associated(dataptr)) then @\
      if (ESMF_LogMsgFoundError(ESMF_RC_OBJ_BAD, & @\
                              "Data Ptr must already be associated", & @\
                              ESMF_CONTEXT, rc)) return @\
    endif @\
@\
    ! do sanity check on existing internal data array @\
    ! destroy existing internal data array if it was copied @\
    if ( (field%ftypep%datastatus .eq. ESMF_STATUS_READY) ) then  @\
        if (field%ftypep%array_internal) then @\
            call ESMF_ArrayDestroy(field%ftypep%array, rc=localrc) @\
            if (ESMF_LogMsgFoundError(localrc, & @\
              ESMF_ERR_PASSTHRU, & @\
              ESMF_CONTEXT, rc)) return @\
        endif @\
    end if @\
@\
    ! fetch the distgrid from field%grid @\
    call ESMF_GeomBaseGet(field%ftypep%geombase, distgrid=distgrid, rc=localrc) @\
    if (ESMF_LogMsgFoundError(localrc, & @\
      ESMF_ERR_PASSTHRU, & @\
      ESMF_CONTEXT, rc)) return @\
@\
    ! create a new array to be used to replace existing field%array @\
    comp_edge_u_width = -1 @\
    array = ESMF_ArrayCreate(dataptr, distgrid=distgrid, staggerloc=staggerloc, & @\
                         computationalEdgeUWidth=comp_edge_u_width, rc=localrc) @\
    if (ESMF_LogMsgFoundError(localrc, & @\
                              ESMF_ERR_PASSTHRU, & @\
                              ESMF_CONTEXT, rc)) return @\
@\
    ! set array as data in field. @\
    ! default copyflag value is ESMF_DATA_REF @\
    ! in the case setdataptr creates an array first to be copied @\
    ! that array is destroyed after being copied. @\
    field%ftypep%array_internal = .true. @\
    if(.not. present(copyflag)) then @\
        field%ftypep%array = array @\
    else @\
        if(copyflag == ESMF_DATA_REF) then @\
            field%ftypep%array = array @\
        else @\
            newarray = ESMF_ArrayCreate(array, rc=localrc) @\
            if (ESMF_LogMsgFoundError(localrc, & @\
                                    ESMF_ERR_PASSTHRU, & @\
                                    ESMF_CONTEXT, rc)) return @\
            field%ftypep%array = newarray @\
            call ESMF_ArrayDestroy(array, rc=localrc) @\
            if (ESMF_LogMsgFoundError(localrc, & @\
                                    ESMF_ERR_PASSTHRU, & @\
                                    ESMF_CONTEXT, rc)) return @\
        endif @\
    endif @\
@\
    field%ftypep%datastatus = ESMF_STATUS_READY @\
    if (rcpresent) rc = ESMF_SUCCESS @\
@\
  end subroutine ESMF_FieldSetDataPtr##mrank##D##mtypekind  @\
!---------------------------------------------------------------------------- @\

TypeKindRankDeclarationMacro(FieldSetDataPtr)

end module ESMF_FieldSetMod
