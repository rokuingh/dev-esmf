! $Id: ESMF_FieldGet.cppF90,v 1.33 2009/01/21 21:37:59 cdeluca Exp $
!
! Earth System Modeling Framework
! Copyright 2002-2009, University Corporation for Atmospheric Research, 
! Massachusetts Institute of Technology, Geophysical Fluid Dynamics 
! Laboratory, University of Michigan, National Centers for Environmental 
! Prediction, Los Alamos National Laboratory, Argonne National Laboratory, 
! NASA Goddard Space Flight Center.
! Licensed under the University of Illinois-NCSA License.
!
!==============================================================================
^define ESMF_FILENAME "ESMF_FieldGet.F90"
!==============================================================================
!
!     ESMF FieldGet module
module ESMF_FieldGetMod
!
!==============================================================================
!
! This file contains the FieldGet() methods.
!
!------------------------------------------------------------------------------
! INCLUDES
! < ignore blank lines below.  they are created by the files which
!   define various macros. >
^include "ESMF.h"
#include "ESMF_TypeKindRankMacros.hcppF90"

!------------------------------------------------------------------------------
! !USES:
  use ESMF_UtilTypesMod
  use ESMF_BaseMod
  use ESMF_LogErrMod
  use ESMF_IOSpecMod
  use ESMF_LocalArrayMod
  use ESMF_ArrayMod
  use ESMF_ArrayGetMod
  use ESMF_GridMod
  use ESMF_MeshMod
  use ESMF_LocStreamMod
  use ESMF_GeomBaseMod
  use ESMF_StaggerLocMod
  use ESMF_InitMacrosMod
  
  use ESMF_FieldMod
      
  implicit none

!------------------------------------------------------------------------------
! !PRIVATE TYPES:
  private

!------------------------------------------------------------------------------
! !PUBLIC MEMBER FUNCTIONS:

  public ESMF_FieldGet
  public ESMF_FieldGetBounds
 
!------------------------------------------------------------------------------
! The following line turns the CVS identifier string into a printable variable.
  character(*), parameter, private :: version = &
    '$Id: ESMF_FieldGet.cppF90,v 1.33 2009/01/21 21:37:59 cdeluca Exp $'

!==============================================================================
! 
! INTERFACE BLOCKS
!
!==============================================================================


!------------------------------------------------------------------------------
!BOPI
! !IROUTINE: ESMF_FieldGet -- Overloaded FieldGet interface

! !INTERFACE:
  interface ESMF_FieldGet

! !PRIVATE MEMBER FUNCTIONS:
!
    module procedure ESMF_FieldGetDefault
    module procedure ESMF_FieldGetGridAllocBounds
    module procedure ESMF_FieldGetMeshAllocBounds
    module procedure ESMF_FieldGetLSAllocBounds
    !module procedure ESMF_FieldGetLocalArray !TODO: FIELDINTEGRATION
    TypeKindRankInterfaceMacro(FieldGetDataPtr)

! !DESCRIPTION: 
! This interface provides a single entry point for the various 
!  types of {\tt ESMF\_FieldGet} subroutines.   
  end interface
!EOPI 
!------------------------------------------------------------------------------


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

contains

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldGetDefault"
!BOP
! !IROUTINE: ESMF_FieldGet - Return info associated with a Field

! !INTERFACE:
  ! Private name; call using ESMF_FieldGet()
  subroutine ESMF_FieldGetDefault(field, geomtype, grid, mesh, locstream, array, typekind, dimCount, &
    staggerloc, gridToFieldMap, ungriddedLBound, ungriddedUBound, &
    maxHaloLWidth, maxHaloUWidth, name, iospec, rc) 
!
! !ARGUMENTS:
    type(ESMF_Field), intent(inout) :: field    
    type(ESMF_GeomType), intent(out), optional :: geomtype     
    type(ESMF_Grid), intent(out), optional :: grid     
    type(ESMF_Mesh), intent(out), optional :: mesh     
    type(ESMF_LocStream), intent(out), optional :: locstream     
    type(ESMF_Array), intent(out), optional :: array     
    type(ESMF_TypeKind), intent(out), optional :: typekind
    integer, intent(out), optional :: dimCount
    type(ESMF_StaggerLoc), intent(out), optional :: staggerloc 
    integer, intent(out), optional :: gridToFieldMap(:)    
    integer, intent(out), optional :: ungriddedLBound(:)
    integer, intent(out), optional :: ungriddedUBound(:)
    integer, intent(out), optional :: maxHaloLWidth(:)
    integer, intent(out), optional :: maxHaloUWidth(:)
    character(len=*), intent(out), optional :: name
    type(ESMF_IOSpec), intent(out), optional :: iospec ! NOT IMPLEMENTED
    integer, intent(out), optional :: rc     
!
! !DESCRIPTION:
! Query an {\tt ESMF\_Field} for various things.  All arguments after
! the {\tt field} are optional.  To select individual items use the
! named\_argument=value syntax. For an example and
! associated documentation using this method see Section 
! \ref{sec:field:usage:field_get_default}.

!
! The arguments are:
! \begin{description}
! \item [field]
!       {\tt ESMF\_Field} object to query.
! \item [{[geomtype]}]
!       Specifies what type of geometry the field is built on. {\tt ESMF\_GEOMTYPE\_GRID}={\tt ESMF\_Grid}.
!       {\tt ESMF\_GEOMTYPE\_MESH}={\tt ESMF\_Mesh}. {\tt ESMF\_GEOMTYPE\_LOCSTREAM}={\tt ESMF\_LocStream}.
! \item [{[grid]}]
!       {\tt ESMF\_Grid}.
! \item [{[mesh]}]
!       {\tt ESMF\_Mesh}.
! \item [{[locstream]}]
!       {\tt ESMF\_LocStream}.
! \item [{[array]}]
!       {\tt ESMF\_Array}.
! \item [{[typekind]}]
!       TypeKind specifier for Field.
! \item [{[dimCount]}]
!       Number of dimensions in {\tt field} data.
! \item [{[staggerloc]}]
!       Stagger location of data in grid cells.  For valid
!       predefined values and interpretation of results see
!       Section \ref{sec:opt:staggerloc}.
! \item [{[gridToFieldMap]}]
!       List with number of elements equal to the
!       {\tt grid}|s dimCount.  The list elements map each dimension
!       of the {\tt grid} to a dimension in the {\tt field} by
!       specifying the appropriate {\tt field} dimension index. The default is to
!       map all of the {\tt grid}|s dimensions against the lowest dimensions of
!       the {\tt field} in sequence, i.e. {\tt gridToFieldMap} = (/1,2,3,.../).
!       The values of all {\tt gridToFieldMap} entries must be greater than or equal
!       to one and smaller than or equal to the {\tt field} rank.
!       It is erroneous to specify the same {\tt gridToFieldMap} entry
!       multiple times. The total ungridded dimensions in the {\tt field}
!       are the total {\tt field} dimensions less
!       the dimensions in
!       the {\tt grid}.  Ungridded dimensions must be in the same order they are
!       stored in the {\t field}.  
! \item [{[ungriddedLBound]}]
!       Lower bounds of the ungridded dimensions of the {\tt field}.
!       The number of elements in the {\tt ungriddedLBound} is equal to the number of ungridded
!       dimensions in the {\tt field}.  All ungridded dimensions of the
!       {\tt field} are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the {\tt field}.
! \item [{[ungriddedUBound]}]
!       Upper bounds of the ungridded dimensions of the {\tt field}.
!       The number of elements in the {\tt ungriddedUBound} is equal to the number of ungridded
!       dimensions in the {\tt field}.  All ungridded dimensions of the
!       {\tt field} are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the {\tt field}.
! \item [{[maxHaloLWidth]}]
!       Lower bound of halo region.  The size of this array is the number
!       of dimensions in the {\tt grid}.  However, ordering of the elements
!       needs to be the same as they appear in the {\tt field}.  Values default
!       to 0.  If values for maxHaloLWidth are specified they must be reflected in
!       the size of the {\tt field}.  That is, for each gridded dimension the
!       {\tt field} size should be max( {\tt maxHaloLWidth} + {\tt maxHaloUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ). Although the halo operation is not
!       implemented, the {\tt minHaloLWidth} is checked for validity and stored
!       in preparation for the implementation of the halo method.
!       HALO OPERATION NOT IMPLEMENTED
! \item [{[maxHaloUWidth]}]
!       Upper bound of halo region.  The size of this array is the number
!       of dimensions in the {\tt grid}.  However, ordering of the elements
!       needs to be the same as they appear in the {\tt field}.  Values default
!       to 0.  If values for maxHaloUWidth are specified they must be reflected in
!       the size of the {\tt field}.  That is, for each gridded dimension the
!       {\tt field} size should max( {\tt maxHaloLWidth} + {\tt maxHaloUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ).  Although the halo operation is not
!       implemented, the {\tt maxHaloUWidth} is checked for validity and stored
!       in preparation for the implementation of the halo method. 
!       HALO OPERATION NOT IMPLEMENTED
! \item [{[name]}]
!       Name of queried item.
! \item [{[iospec]}]
!       {\tt ESMF\_IOSpec} object which contains settings for options. NOT IMPLEMENTED
! \item [{[rc]}]
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!EOP
!------------------------------------------------------------------------------
    type(ESMF_FieldType), pointer :: ftype
    integer :: localrc

    ! Initialize
    localrc = ESMF_RC_NOT_IMPL
    if (present(rc)) rc = ESMF_RC_NOT_IMPL

    ! check variables
    ESMF_INIT_CHECK_DEEP(ESMF_FieldGetInit,field,rc)

    ! Get Field pointer
    ftype => field%ftypep

    ! Get the geometry type
    if (present(geomtype)) then
      call ESMF_GeomBaseGet(ftype%geombase, geomtype=geomtype, rc=localrc)
        if (ESMF_LogMsgFoundError(localrc, &
                                  ESMF_ERR_PASSTHRU, &
                                  ESMF_CONTEXT, rc)) return
    endif

    if (present(grid)) then
        if (ftype%gridstatus .ne. ESMF_STATUS_READY) then
            if (ESMF_LogMsgFoundError(ESMF_RC_OBJ_BAD, &
                            "No Grid or invalid Grid attached to Field", &
                             ESMF_CONTEXT, rc)) return
        endif
        call ESMF_GeomBaseGet(ftype%geombase, &
                  grid=grid, staggerloc=staggerloc, rc=localrc)
        if (ESMF_LogMsgFoundError(localrc, &
                                  ESMF_ERR_PASSTHRU, &
                                  ESMF_CONTEXT, rc)) return
    endif

    if (present(mesh)) then
        if (ftype%gridstatus .ne. ESMF_STATUS_READY) then
            if (ESMF_LogMsgFoundError(ESMF_RC_OBJ_BAD, &
                            "No Mesh or invalid Mesh attached to Field", &
                             ESMF_CONTEXT, rc)) return
        endif
        call ESMF_GeomBaseGet(ftype%geombase, &
                  mesh=mesh, rc=localrc)
        if (ESMF_LogMsgFoundError(localrc, &
                                  ESMF_ERR_PASSTHRU, &
                                  ESMF_CONTEXT, rc)) return
    endif

    if (present(locstream)) then
        if (ftype%gridstatus .ne. ESMF_STATUS_READY) then
            if (ESMF_LogMsgFoundError(ESMF_RC_OBJ_BAD, &
                            "No LocStream or invalid LocStream attached to Field", &
                             ESMF_CONTEXT, rc)) return
        endif
        call ESMF_GeomBaseGet(ftype%geombase, &
                  locstream=locstream, rc=localrc)
        if (ESMF_LogMsgFoundError(localrc, &
                                  ESMF_ERR_PASSTHRU, &
                                  ESMF_CONTEXT, rc)) return
    endif


    if (present(array)) then
        if (ftype%datastatus .ne. ESMF_STATUS_READY) then
            if (ESMF_LogMsgFoundError(ESMF_RC_OBJ_BAD, &
                            "No data attached to Field", &
                             ESMF_CONTEXT, rc)) return
        endif
        array = ftype%array
    endif

    if (present(gridToFieldMap)) then
        gridToFieldMap = ftype%gridToFieldMap
    endif

    if (present(ungriddedLBound)) then
        ungriddedLBound = ftype%ungriddedLBound
    endif

    if (present(ungriddedUBound)) then
        ungriddedUBound = ftype%ungriddedUBound
    endif

    if (present(maxHaloLWidth)) then
        maxHaloLWidth = ftype%maxHaloLWidth
    endif

    if (present(ungriddedUBound)) then
        maxHaloUWidth = ftype%maxHaloUWidth
    endif

    if (present(typekind)) then
        if (ftype%datastatus .ne. ESMF_STATUS_READY) then
            if (ESMF_LogMsgFoundError(ESMF_RC_OBJ_BAD, &
             "Cannot return typekind because no data attached to Field", &
                             ESMF_CONTEXT, rc)) return
        endif
        call ESMF_ArrayGet(ftype%array, &
                           typekind=typekind, rc=rc)
        if (ESMF_LogMsgFoundError(rc, &
                                  ESMF_ERR_PASSTHRU, &
                                  ESMF_CONTEXT, rc)) return
    endif

    if (present(dimCount)) then
        if (ftype%datastatus .ne. ESMF_STATUS_READY) then
            if (ESMF_LogMsgFoundError(ESMF_RC_OBJ_BAD, &
             "Cannot return dimCount because no data attached to Field", &
                             ESMF_CONTEXT, rc)) return
        endif
        call ESMF_ArrayGet(ftype%array, &
                           rank=dimCount, rc=rc)
        if (ESMF_LogMsgFoundError(rc, &
                                  ESMF_ERR_PASSTHRU, &
                                  ESMF_CONTEXT, rc)) return
    endif

    if (present(iospec)) iospec = ftype%iospec

    if (present(name)) then
        call c_ESMC_GetName(ftype%base, name, localrc)
        if (ESMF_LogMsgFoundError(localrc, &
                              ESMF_ERR_PASSTHRU, &
                              ESMF_CONTEXT, rc)) return
    endif

    if (present(rc)) rc = ESMF_SUCCESS

  end subroutine ESMF_FieldGetDefault
!------------------------------------------------------------------------------


! TODO:FIELDINTEGRATION Restore FieldGetLocalArray
#if 0
!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldGetLocalArray"
!BOPI
! !IROUTINE: ESMF_FieldGet - Get LocalArray associated with the Field

! !INTERFACE:
  ! Private name; call using ESMF_FieldGet()
  subroutine ESMF_FieldGetLocalArray(field, localarray, rc)
!
! !ARGUMENTS:
    type(ESMF_Field), intent(inout) :: field
    type(ESMF_LocalArray), intent(out) :: localarray
    integer, intent(out), optional :: rc
!
! !DESCRIPTION:
! Get data in {\tt ESMF\_LocalArray} form.
!
! The arguments are:
! \begin{description}
! \item [field]
!       An {\tt ESMF\_Field} object.
! \item [{[localarray]}]
!       Field {\tt ESMF\_LocalArray}.
! \item [{[rc]}]
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!EOPI
!------------------------------------------------------------------------------
    integer :: localrc 
    !character(len=ESMF_MAXSTR) :: str
    type(ESMF_Array) :: array

    ! Initialize
    localrc = ESMF_RC_NOT_IMPL
    if (present(rc)) rc = ESMF_RC_NOT_IMPL

    ! check variables
    ESMF_INIT_CHECK_DEEP(ESMF_FieldGetInit,field,rc)

    call ESMF_FieldGetArray(field, array, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                              ESMF_ERR_PASSTHRU, &
                              ESMF_CONTEXT, rc)) return


    call ESMF_ArrayGet(array, localarray, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                              ESMF_ERR_PASSTHRU, &
                              ESMF_CONTEXT, rc)) return
    
    ! Set return values.
    if (present(rc)) rc = ESMF_SUCCESS

  end subroutine ESMF_FieldGetLocalArray
!------------------------------------------------------------------------------
#endif


#define FieldGetDataPtrDoc() \
!---------------------------------------------------------------------------- @\
!BOP @\
! !IROUTINE: ESMF_FieldGet - Get Fortran data pointer from a Field @\
! @\
! !INTERFACE: @\
! ! Private name; call using ESMF_FieldGet() @\
! subroutine ESMF_FieldGetDataPtr<rank><type><kind>(field, localDe, farray, & @\
!   exclusiveLBound, exclusiveUBound, exclusiveCount, & @\
!   computationalLBound, computationalUBound, computationalCount, & @\
!   totalLBound, totalUBound, totalCount, rc) @\
! @\
! !ARGUMENTS: @\
!   type(ESMF_Field), intent(in)            :: field @\
!   integer,          intent(in), optional  :: localDe @\
!   <type> (ESMF_KIND_<kind>), dimension(<rank>), pointer  :: farray @\
!   integer,          intent(out), optional :: exclusiveLBound(:) @\
!   integer,          intent(out), optional :: exclusiveUBound(:) @\
!   integer,          intent(out), optional :: exclusiveCount(:) @\
!   integer,          intent(out), optional :: computationalLBound(:) @\
!   integer,          intent(out), optional :: computationalUBound(:) @\
!   integer,          intent(out), optional :: computationalCount(:) @\
!   integer,          intent(out), optional :: totalLBound(:) @\
!   integer,          intent(out), optional :: totalUBound(:) @\
!   integer,          intent(out), optional :: totalCount(:) @\
!   integer,          intent(out), optional :: rc @\
! @\
! !DESCRIPTION: @\
! Get a Fortran pointer to DE-local memory allocation within {\tt field}. @\
! For convenience DE-local bounds can be queried at the same time. @\
! For an example and @\
! associated documentation using this method see Section @\
! \ref{sec:field:usage:field_get_dataptr}. @\
! @\
! The arguments are: @\
! \begin{description} @\
! \item [field]  @\
!   {\tt ESMF\_Field} object. @\
! \item[{[localDe]}] @\
!  Local DE for which information is requested. {\tt [0,..,localDeCount-1]}. @\
!  For {\tt localDeCount==1} the {\tt localDe} argument may be omitted, @\
!  in which case it will default to {\tt localDe=0}. @\
! \item [farray] @\
!   Fortran array pointer which will be pointed at DE-local memory allocation. @\
! \item[{[exclusiveLBound]}] @\
!   Upon return this holds the lower bounds of the exclusive region. @\
!   {\tt exclusiveLBound} must be allocated to be of size equal to {\tt field}|s {\tt dimCount}. @\
!   See section \ref{Array_regions_and_default_bounds} for a description @\
!   of the regions and their associated bounds and counts.  @\
! \item[{[exclusiveUBound]}] @\
!   Upon return this holds the upper bounds of the exclusive region. @\
!   {\tt exclusiveUBound} must be allocated to be of size equal to {\tt field}|s {\tt dimCount}. @\
!   See section \ref{Array_regions_and_default_bounds} for a description @\
!   of the regions and their associated bounds and counts.  @\
! \item[{[exclusiveCount]}] @\
!   Upon return this holds the number of items in the exclusive region per dimension @\
!   (i.e. {\tt exclusiveUBound-exclusiveLBound+1}). {\tt exclusiveCount} must @\
!   be allocated to be of size equal to {\tt field}|s {\tt dimCount}. @\
!   See section \ref{Array_regions_and_default_bounds} for a description @\
!   of the regions and their associated bounds and counts.  @\
! \item[{[computationalLBound]}] @\
!   Upon return this holds the lower bounds of the computational region. @\
!   {\tt computationalLBound} must be allocated to be of size equal to {\tt field}|s {\tt dimCount}. @\
!   See section \ref{Array_regions_and_default_bounds} for a description @\
!   of the regions and their associated bounds and counts.  @\
! \item[{[computationalUBound]}] @\
!   Upon return this holds the lower bounds of the computational region. @\
!   {\tt computationalLBound} must be allocated to be of size equal to {\tt field}|s {\tt dimCount}. @\
!   See section \ref{Array_regions_and_default_bounds} for a description @\
!   of the regions and their associated bounds and counts.  @\
! \item[{[computationalCount]}] @\
!   Upon return this holds the number of items in the computational region per dimension @\
!   (i.e. {\tt computationalUBound-computationalLBound+1}). {\tt computationalCount} must @\
!   be allocated to be of size equal to {\tt field}|s {\tt dimCount}. @\
!   See section \ref{Array_regions_and_default_bounds} for a description @\
!   of the regions and their associated bounds and counts.  @\
! \item[{[totalLBound]}] @\
!   Upon return this holds the lower bounds of the total region. @\
!   {\tt totalLBound} must be allocated to be of size equal to {\tt field}|s {\tt dimCount}. @\
!   See section \ref{Array_regions_and_default_bounds} for a description @\
!   of the regions and their associated bounds and counts.  @\
! \item[{[totalUBound]}] @\
!   Upon return this holds the lower bounds of the total region. @\
!   {\tt totalUBound} must be allocated to be of size equal to {\tt field}|s {\tt dimCount}. @\
!   See section \ref{Array_regions_and_default_bounds} for a description @\
!   of the regions and their associated bounds and counts.  @\
! \item[{[totalCount]}] @\
!   Upon return this holds the number of items in the total region per dimension @\
!   (i.e. {\tt totalUBound-totalLBound+1}). {\tt computationalCount} must @\
!   be allocated to be of size equal to {\tt field}|s {\tt dimCount}. @\
!   See section \ref{Array_regions_and_default_bounds} for a description @\
!   of the regions and their associated bounds and counts.  @\
! \item [{[rc]}]  @\
!   Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
! \end{description} @\
! @\
!EOP @\
!---------------------------------------------------------------------------- @\

#define FieldGetDataPtrMacro(mname, mtypekind, mrank, mdim, mlen, mrng, mloc) \
!---------------------------------------------------------------------------- @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_FieldGetDataPtr" @\
  subroutine ESMF_FieldGetDataPtr##mrank##D##mtypekind(field, localDe, farray, & @\
    exclusiveLBound, exclusiveUBound, exclusiveCount, & @\
    computationalLBound, computationalUBound, computationalCount, & @\
    totalLBound, totalUBound, totalCount, rc) @\
@\
    ! input arguments @\
    type(ESMF_Field), intent(in)            :: field @\
    integer,          intent(in), optional  :: localDe @\
    mname (ESMF_KIND_##mtypekind), dimension(mdim), pointer :: farray @\
    integer,          intent(out), optional :: exclusiveLBound(:) @\
    integer,          intent(out), optional :: exclusiveUBound(:) @\
    integer,          intent(out), optional :: exclusiveCount(:) @\
    integer,          intent(out), optional :: computationalLBound(:) @\
    integer,          intent(out), optional :: computationalUBound(:) @\
    integer,          intent(out), optional :: computationalCount(:) @\
    integer,          intent(out), optional :: totalLBound(:) @\
    integer,          intent(out), optional :: totalUBound(:) @\
    integer,          intent(out), optional :: totalCount(:) @\
    integer,          intent(out), optional :: rc @\
@\
    ! local variables @\
    integer          :: localrc @\
@\
    if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
    localrc = ESMF_RC_NOT_IMPL @\
@\
    ! check variables @\
    ESMF_INIT_CHECK_DEEP(ESMF_FieldGetInit,field,rc) @\
@\
    call ESMF_ArrayGet(field%ftypep%array, localDe=localDe, & @\
      farrayPtr=farray, rc=localrc) @\
@\
    if (ESMF_LogMsgFoundError(localrc, & @\
        ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rc)) return @\
@\
    call ESMF_FieldGetBounds(field, localDe, & @\
        exclusiveLBound, exclusiveUBound, exclusiveCount, & @\
        computationalLBound, computationalUBound, computationalCount, & @\
        totalLBound, totalUBound, totalCount, & @\
        rc = localrc) @\
@\
    if (ESMF_LogMsgFoundError(localrc, & @\
        ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rc)) return @\
@\
    if (present(rc)) rc = ESMF_SUCCESS @\
@\
  end subroutine ESMF_FieldGetDataPtr##mrank##D##mtypekind  @\
!---------------------------------------------------------------------------- @\

TypeKindRankDeclarationMacro(FieldGetDataPtr)


!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldGetBounds"
!BOP
! !IROUTINE: ESMF_FieldGetBounds -  Get Field data bounds

! !INTERFACE:
  ! Private name; call using ESMF_FieldGetBounds()
  subroutine ESMF_FieldGetBounds(field, localDe, exclusiveLBound, &
    exclusiveUBound, exclusiveCount, computationalLBound, computationalUBound, &
    computationalCount, totalLBound, totalUBound, totalCount, rc)

! !ARGUMENTS:
    type(ESMF_Field),       intent(in) :: field
    integer,                intent(in), optional :: localDe
    integer,                intent(out), optional :: exclusiveLBound(:)
    integer,                intent(out), optional :: exclusiveUBound(:)
    integer,                intent(out), optional :: exclusiveCount(:)
    integer,                intent(out), optional :: computationalLBound(:)
    integer,                intent(out), optional :: computationalUBound(:)
    integer,                intent(out), optional :: computationalCount(:)
    integer,                intent(out), optional :: totalLBound(:)
    integer,                intent(out), optional :: totalUBound(:)
    integer,                intent(out), optional :: totalCount(:)
    integer,                intent(out), optional :: rc

! !DESCRIPTION:
! This method returns the bounds information of a field that consists of a
! internal grid and a internal array. The exclusive and computational bounds
! are shared between the grid and the array but the total bounds are the array
! bounds plus the halo width. The count is the number of elements between each
! bound pair.
!
! The arguments are:
! \begin{description}
! \item[field]
!     Field to get the information from.
! \item[{[localDe]}]
!  Local DE for which information is requested. {\tt [0,..,localDeCount-1]}.
!  For {\tt localDeCount==1} the {\tt localDe} argument may be omitted,
!  in which case it will default to {\tt localDe=0}.
! \item[{[exclusiveLBound]}]
!     Upon return this holds the lower bounds of the exclusive region.
!     {\tt exclusiveLBound} must be allocated to be of size equal to the field rank.
!     Please see Section~\ref{sec:grid:usage:bounds} for a description
!     of the regions and their associated bounds and counts. 
! \item[{[exclusiveUBound]}]
!     Upon return this holds the upper bounds of the exclusive region.
!     {\tt exclusiveUBound} must be allocated to be of size equal to the field rank.
!     Please see Section~\ref{sec:grid:usage:bounds} for a description
!     of the regions and their associated bounds and counts. 
! \item[{[exclusiveCount]}]
!     Upon return this holds the number of items in the exclusive region per dimension
!     (i.e. {\tt exclusiveUBound-exclusiveLBound+1}). {\tt exclusiveCount} must
!     be allocated to be of size equal to the field rank.
!     Please see Section~\ref{sec:grid:usage:bounds} for a description
!     of the regions and their associated bounds and counts. 
! \item[{[computationalLBound]}]
!     Upon return this holds the lower bounds of the stagger region.
!     {\tt computationalLBound} must be allocated to be of size equal to the field rank.
!     Please see Section~\ref{sec:grid:usage:bounds} for a description
!     of the regions and their associated bounds and counts. 
! \item[{[computationalUBound]}]
!     Upon return this holds the upper bounds of the stagger region.
!     {\tt computationalUBound} must be allocated to be of size equal to the field rank.
!     Please see Section~\ref{sec:grid:usage:bounds} for a description
!     of the regions and their associated bounds and counts. 
! \item[{[computationalCount]}]
!     Upon return this holds the number of items in the computational region per dimension
!     (i.e. {\tt computationalUBound-computationalLBound+1}). {\tt computationalCount}
!      must be allocated to be of size equal to the field rank.
!     Please see Section~\ref{sec:grid:usage:bounds} for a description
!     of the regions and their associated bounds and counts. 
! \item[{[totalLBound]}]
!     Upon return this holds the lower bounds of the total region.
!     {\tt totalLBound} must be allocated to be of size equal to the field rank.
! \item[{[totalUBound]}]
!     Upon return this holds the upper bounds of the total region.
!     {\tt totalUBound} must be allocated to be of size equal to the field rank.
! \item[{[totalCount]}]
!     Upon return this holds the number of items in the total region per dimension
!     (i.e. {\tt totalUBound-totalLBound+1}). {\tt totalCount} must
!      be allocated to be of size equal to the field rank.
! \item[{[rc]}]
!     Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!EOP
!------------------------------------------------------------------------------
    integer :: gridCompLBnd(ESMF_MAXDIM), gridCompUBnd(ESMF_MAXDIM)
    integer :: gridExclLBnd(ESMF_MAXDIM), gridExclUBnd(ESMF_MAXDIM)
    integer :: gridrank, fieldrank, localrc
    integer :: i, j
    logical :: filled(ESMF_MAXDIM)

    integer :: localDeCount, dimCount, l_localDe
    integer, allocatable :: arrayBnd(:, :)
    integer, allocatable :: undistBnd(:)
    integer, allocatable :: distgridToArrayMap(:)
    integer, allocatable :: distgridToPackedArrayMap(:)
    integer, dimension(:), allocatable :: l_elb, l_eub, l_clb, l_cub
    integer, dimension(:), allocatable :: l_tlb, l_tub
    integer, dimension(:), allocatable :: l_ec, l_cc, l_tc


    if (present(rc)) rc = ESMF_RC_NOT_IMPL 
    localrc = ESMF_RC_NOT_IMPL

    ! check variables
    ESMF_INIT_CHECK_DEEP(ESMF_FieldGetInit,field,rc)

    call ESMF_GeomBaseGet(field%ftypep%geombase, dimCount=gridrank, rc=localrc)
    if (localrc .ne. ESMF_SUCCESS) then
       call ESMF_LogMsgSetError(ESMF_RC_OBJ_BAD, &
          "Cannot retrieve gridrank from ftypep%grid", &
           ESMF_CONTEXT, rc)
       return
    endif 
    call ESMF_ArrayGet(field%ftypep%array, rank=fieldrank, &
        localDeCount=localDeCount, &
        rc=localrc)
    if (localrc .ne. ESMF_SUCCESS) then
       call ESMF_LogMsgSetError(ESMF_RC_OBJ_BAD, &
          "Cannot retrieve fieldrank from ftypep%array", &
           ESMF_CONTEXT, rc)
       return
    endif 

    if(localDeCount .gt. 1 .and. (.not. present(localDe))) then
       call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &
          "localDe must be present when localDeCount is greater than 1", &
           ESMF_CONTEXT, rc)
       return
    endif 
    if(present(localDe)) then
        l_localDe = localDe
    else 
        l_localDe = 0
    endif

    if(present(exclusiveLBound)) then
        if(size(exclusiveLBound) .ne. fieldrank) then
           call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &
              "the size of exclusiveLBound must equal to the field rank", &
               ESMF_CONTEXT, rc)
           return
        endif 
    endif
    if(present(exclusiveUBound)) then
        if(size(exclusiveUBound) .ne. fieldrank) then
           call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &
              "the size of exclusiveUBound must equal to the field rank", &
               ESMF_CONTEXT, rc)
           return
        endif 
    endif
    if(present(exclusiveCount)) then
        if(size(exclusiveCount) .ne. fieldrank) then
           call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &
              "the size of exclusiveCount must equal to the field rank", &
               ESMF_CONTEXT, rc)
           return
        endif 
    endif
    if(present(computationalLBound)) then
        if(size(computationalLBound) .ne. fieldrank) then
           call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &
              "the size of computationalLBound must equal to the field rank", &
               ESMF_CONTEXT, rc)
           return
        endif 
    endif
    if(present(computationalUBound)) then
        if(size(computationalUBound) .ne. fieldrank) then
           call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &
              "the size of computationalUBound must equal to the field rank", &
               ESMF_CONTEXT, rc)
           return
        endif 
    endif
    if(present(computationalCount)) then
        if(size(computationalCount) .ne. fieldrank) then
           call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &
              "the size of computationalCount must equal to the field rank", &
               ESMF_CONTEXT, rc)
           return
        endif 
    endif
    if(present(totalLBound)) then
        if(size(totalLBound) .ne. fieldrank) then
           call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &
              "the size of totalLBound must equal to the field rank", &
               ESMF_CONTEXT, rc)
           return
        endif 
    endif
    if(present(totalUBound)) then
        if(size(totalUBound) .ne. fieldrank) then
           call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &
              "the size of totalUBound must equal to the field rank", &
               ESMF_CONTEXT, rc)
           return
        endif 
    endif
    if(present(totalCount)) then
        if(size(totalCount) .ne. fieldrank) then
           call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &
              "the size of totalCount must equal to the field rank", &
               ESMF_CONTEXT, rc)
           return
        endif 
    endif

    ! local temporaries to store return values
    allocate(l_elb(fieldrank), l_eub(fieldrank), l_clb(fieldrank), l_cub(fieldrank))
    allocate(l_tlb(fieldrank), l_tub(fieldrank))
    allocate(l_ec(fieldrank), l_cc(fieldrank), l_tc(fieldrank))

    if (present(totalLBound) .or. present(totalUBound)) then
    
        ! Get Size of Array info
        call ESMF_ArrayGet(field%ftypep%array, dimCount=dimCount, rc=localrc)

        ! Allocate storage for Array info
        allocate(arrayBnd(dimCount, 0:localDeCount-1))
        allocate(undistBnd(fieldRank-dimCount))
        allocate(distgridToPackedArrayMap(dimCount))
        allocate(distgridToArrayMap(dimCount))
              
       ! get distributed dimension map
       call ESMF_ArrayGet(field%ftypep%array, & 
         distgridToPackedArrayMap=distgridToPackedArrayMap, &
         distgridToArrayMap=distgridToArrayMap, rc=localrc)
    
        ! fill totalLBounds
        if (present(totalLBound)) then
            call ESMF_ArrayGet(field%ftypep%array, totalLBound=arrayBnd, & 
                undistLBound=undistBnd, rc=localrc)
    
            ! set distributed dimensions
            filled=.false.
            do i=1, dimCount
               l_tlb(distgridToArrayMap(i))=&
                arrayBnd(distgridToPackedArrayMap(i),l_localDe)
               filled(distgridToArrayMap(i))=.true.
            enddo
    
            ! set undistributed dimensions
            j=1
            do i=1, fieldRank
               if (.not. filled(i)) then
                   l_tlb(i)=undistBnd(j)
                   j=j+1;
               endif
            enddo
        endif
    
        ! fill totalUBounds
        if (present(totalUBound)) then
            call ESMF_ArrayGet(field%ftypep%array, totalUBound=arrayBnd, & 
                undistUBound=undistBnd, rc=localrc)
    
            ! set distributed dimensions
            filled=.false.
            do i=1, dimCount
                l_tub(distgridToArrayMap(i))=&
                arrayBnd(distgridToPackedArrayMap(i),l_localDe)
               filled(distgridToArrayMap(i))=.true.
            enddo
    
            ! set undistributed dimensions
            j=1
            do i=1, fieldRank
               if (.not. filled(i)) then
                   l_tub(i)=undistBnd(j)
                   j=j+1;
               endif
           enddo
        endif
        ! deallocate data
        deallocate(arrayBnd)
        deallocate(undistBnd)
        deallocate(distgridToPackedArrayMap)
        deallocate(distgridToArrayMap)
    endif

    ! get grid info 
    call ESMF_GeomBaseGetPLocalDE(field%ftypep%geombase, localDe=localDe, & 
            computationalLBound=gridCompLBnd, &
            computationalUBound=gridCompUBnd, &
            exclusiveLBound=gridExclLBnd, &
            exclusiveUBound=gridExclUBnd, &
            rc=localrc) 


    ! fill in Grid bounds 
    filled=.false. 
    do i=1, gridrank 
        if(field%ftypep%gridToFieldMap(i) .gt. 0) then
            l_clb(field%ftypep%gridToFieldMap(i)) = gridCompLBnd(i)
            l_cub(field%ftypep%gridToFieldMap(i)) = gridCompUBnd(i)
            l_elb(field%ftypep%gridToFieldMap(i)) = gridExclLBnd(i) 
            l_eub(field%ftypep%gridToFieldMap(i)) = gridExclUBnd(i) 
            filled(field%ftypep%gridToFieldMap(i))=.true. 
        endif
    enddo
 
    ! fill in ungridded bounds
    j=1
    do i=1,fieldrank
       if (.not. filled(i)) then
            l_clb(i) = field%ftypep%ungriddedLBound(j)
            l_cub(i) = field%ftypep%ungriddedUBound(j)
            l_elb(i) = field%ftypep%ungriddedLBound(j)
            l_eub(i) = field%ftypep%ungriddedUBound(j)
            j=j+1
       endif
    enddo

    do i = 1, fieldrank 
        l_cc(i) = l_cub(i) - l_clb(i) + 1
        l_ec(i) = l_eub(i) - l_elb(i) + 1
        l_tc(i) = l_tub(i) - l_tlb(i) + 1
    end do

    ! prepare return values
    ! computational region
    if(present(computationalLBound)) &
        computationalLBound(1:fieldrank) = l_clb
    if(present(computationalUBound)) &
        computationalUBound(1:fieldrank) = l_cub
    if(present(computationalCount)) &
        computationalCount(1:fieldrank) = l_cc

    ! exclusive region
    if(present(exclusiveLBound)) &
        exclusiveLBound(1:fieldrank) = l_elb
    if(present(exclusiveUBound)) &
        exclusiveUBound(1:fieldrank) = l_eub
    if(present(exclusiveCount)) &
        exclusiveCount(1:fieldrank) = l_ec

    ! total region
    if(present(totalLBound)) &
        totalLBound(1:fieldrank) = l_tlb
    if(present(totalUBound)) &
        totalUBound(1:fieldrank) = l_tub
    if(present(totalCount)) &
        totalCount(1:fieldrank) = l_tc

    ! Deallocate temporary arrays
    deallocate(l_elb, l_eub, l_clb, l_cub)
    deallocate(l_tlb, l_tub)
    deallocate(l_ec, l_cc, l_tc)

    if (present(rc)) rc = ESMF_SUCCESS
  end subroutine ESMF_FieldGetBounds
!------------------------------------------------------------------------------

!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldGetGridAllocBounds"
!BOP
! !IROUTINE: ESMF_FieldGet -  Get precomputed Fortran data array bounds

! !INTERFACE:
  ! Private name; call using ESMF_FieldGet()
    subroutine ESMF_FieldGetGridAllocBounds(grid, localDe, staggerloc, &
        gridToFieldMap, &
        ungriddedLBound, ungriddedUBound, &
        maxHaloLWidth, maxHaloUWidth, &
        totalLBound, totalUBound, totalCount, rc)
    
! !ARGUMENTS:
    type(ESMF_Grid), intent(inout) :: grid     
    integer, intent(in), optional  :: localDe
    type(ESMF_StaggerLoc), intent(in), optional :: staggerloc 
    integer, intent(in), optional :: gridToFieldMap(:)    
    integer, intent(in), optional :: ungriddedLBound(:)
    integer, intent(in), optional :: ungriddedUBound(:)
    integer, intent(in), optional :: maxHaloLWidth(:)
    integer, intent(in), optional :: maxHaloUWidth(:)
    integer, intent(out), optional :: totalLBound(:)
    integer, intent(out), optional :: totalUBound(:)
    integer, intent(out), optional :: totalCount(:)
    integer, intent(out), optional :: rc     

!
! !DESCRIPTION:
! Compute the lower and upper bounds of Fortran data array that can later
! be used in FieldCreate interface to create a {\tt ESMF\_Field} from a
! {\tt ESMF\_Grid} and the Fortran data array. For an example and
! associated documentation using this method see Section 
! \ref{sec:field:usage:create_5dgrid_7dptr_2dungridded}.
!
! The arguments are:
! \begin{description}
! \item [grid]
!       {\tt ESMF\_Grid}.
! \item [{[localDe]}]
!       Local DE for which information is requested. {\tt [0,..,localDeCount-1]}.
!       For {\tt localDeCount==1} the {\tt localDe} argument may be omitted,
!       in which case it will default to {\tt localDe=0}.
! \item [{[staggerloc]}]
!       Stagger location of data in grid cells.  For valid
!       predefined values and interpretation of results see
!       Section \ref{sec:opt:staggerloc}.
! \item [{[gridToFieldMap]}]
!       List with number of elements equal to the
!       {\tt grid}|s dimCount.  The list elements map each dimension
!       of the {\tt grid} to a dimension in the {\tt field} by
!       specifying the appropriate {\tt field} dimension index. The default is to
!       map all of the {\tt grid}|s dimensions against the lowest dimensions of
!       the {\tt field} in sequence, i.e. {\tt gridToFieldMap} = (/1,2,3,.../).
!       The values of all {\tt gridToFieldMap} entries must be greater than or equal
!       to one and smaller than or equal to the {\tt field} rank.
!       It is erroneous to specify the same {\tt gridToFieldMap} entry
!       multiple times. The total ungridded dimensions in the {\tt field}
!       are the total {\tt field} dimensions less
!       the dimensions in
!       the {\tt grid}.  Ungridded dimensions must be in the same order they are
!       stored in the {\t field}.  
! \item [{[ungriddedLBound]}]
!       Lower bounds of the ungridded dimensions of the {\tt field}.
!       The number of elements in the {\tt ungriddedLBound} is equal to the number of ungridded
!       dimensions in the {\tt field}.  All ungridded dimensions of the
!       {\tt field} are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the {\tt field}.
! \item [{[ungriddedUBound]}]
!       Upper bounds of the ungridded dimensions of the {\tt field}.
!       The number of elements in the {\tt ungriddedUBound} is equal to the number of ungridded
!       dimensions in the {\tt field}.  All ungridded dimensions of the
!       {\tt field} are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the {\tt field}.
! \item [{[maxHaloLWidth]}]
!       Lower bound of halo region.  The size of this array is the number
!       of dimensions in the {\tt grid}.  However, ordering of the elements
!       needs to be the same as they appear in the {\tt field}.  Values default
!       to 0.  If values for maxHaloLWidth are specified they must be reflected in
!       the size of the {\tt field}.  That is, for each gridded dimension the
!       {\tt field} size should be max( {\tt maxHaloLWidth} + {\tt maxHaloUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ). Although the halo operation is not
!       implemented, the {\tt minHaloLWidth} is checked for validity and stored
!       in preparation for the implementation of the halo method.
!       HALO OPERATION NOT IMPLEMENTED
! \item [{[maxHaloUWidth]}]
!       Upper bound of halo region.  The size of this array is the number
!       of dimensions in the {\tt grid}.  However, ordering of the elements
!       needs to be the same as they appear in the {\tt field}.  Values default
!       to 0.  If values for maxHaloUWidth are specified they must be reflected in
!       the size of the {\tt field}.  That is, for each gridded dimension the
!       {\tt field} size should max( {\tt maxHaloLWidth} + {\tt maxHaloUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ).  Although the halo operation is not
!       implemented, the {\tt maxHaloUWidth} is checked for validity and stored
!       in preparation for the implementation of the halo method. 
!       HALO OPERATION NOT IMPLEMENTED
! \item [{[totalLBound]}]
!       The relative lower bounds of Fortran data array to be used
!       later in {tt ESMF\_FieldCreate} from {\tt ESMF\_Grid} and Fortran data array.
!       This is an output variable from this user interface.
! \item [{[totalUBound]}]
!       The relative upper bounds of Fortran data array to be used
!       later in {tt ESMF\_FieldCreate} from {\tt ESMF\_Grid} and Fortran data array.
!       This is an output variable from this user interface.
! \item [{[totalCount]}]
!       Number of elements need to be allocated for Fortran data array to be used
!       later in {tt ESMF\_FieldCreate} from {\tt ESMF\_Grid} and Fortran data array.
!       This is an output variable from this user interface.
!
! \item[{[rc]}]
!     Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!EOPI

!  !Local Variables
    integer :: localrc
    type(ESMF_STAGGERLOC)                  :: l_staggerloc
    type(ESMF_GeomBase) :: geombase

    ! Initialize
    localrc = ESMF_RC_NOT_IMPL
    if (present(rc)) rc = ESMF_RC_NOT_IMPL

    ESMF_INIT_CHECK_DEEP(ESMF_GridGetInit,grid,rc)

    ! default staggerloc setup
    if(present(staggerloc)) then
        l_staggerloc = staggerloc
    else
        l_staggerloc = ESMF_STAGGERLOC_CENTER
    endif

     ! Create GeomBase from Grid
    geombase=ESMF_GeomBaseCreate(grid,l_staggerloc, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, ESMF_ERR_PASSTHRU, &
                                     ESMF_CONTEXT, rc)) return
 

    ! call into generic alloc bound calculation subroutine
    call ESMF_FieldGetGBAllocBounds(geombase, localDe, gridToFieldMap, &
        ungriddedLBound, ungriddedUBound, &
        maxHaloLWidth, maxHaloUWidth, &
        totalLBound, totalUBound, totalCount, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
        ESMF_ERR_PASSTHRU, &
        ESMF_CONTEXT, rc)) return

    ! Destroy GeomBase
    call ESMF_GeomBaseDestroy(geombase, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
        ESMF_ERR_PASSTHRU, &
        ESMF_CONTEXT, rc)) return

    if (present(rc)) rc = ESMF_SUCCESS
    end subroutine ESMF_FieldGetGridAllocBounds

!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldGetLSAllocBounds"
!BOP
! !IROUTINE: ESMF_FieldGet -  Get precomputed Fortran data array bounds

! !INTERFACE:
  ! Private name; call using ESMF_FieldGet()
    subroutine ESMF_FieldGetLSAllocBounds(locstream, localDe, &
        gridToFieldMap, &
        ungriddedLBound, ungriddedUBound, &
        totalLBound, totalUBound, totalCount, rc)
    
! !ARGUMENTS:
    type(ESMF_LocStream), intent(inout) :: locstream     
    integer, intent(in), optional :: localDe
    integer, intent(in), optional :: gridToFieldMap(:)    
    integer, intent(in), optional :: ungriddedLBound(:)
    integer, intent(in), optional :: ungriddedUBound(:)
    integer, intent(out), optional :: totalLBound(:)
    integer, intent(out), optional :: totalUBound(:)
    integer, intent(out), optional :: totalCount(:)
    integer, intent(out), optional :: rc     

!
! !DESCRIPTION:
! Compute the lower and upper bounds of Fortran data array that can later
! be used in FieldCreate interface to create a {\tt ESMF\_Field} from a
! {\tt ESMF\_LocStream} and the Fortran data array.  For an example and
! associated documentation using this method see Section 
! \ref{sec:field:usage:create_5dgrid_7dptr_2dungridded}.
!
! The arguments are:
! \begin{description}
! \item [locstream]
!       {\tt ESMF\_LocStream}.
! \item [{[localDe]}]
!       Local DE for which information is requested. {\tt [0,..,localDeCount-1]}.
!       For {\tt localDeCount==1} the {\tt localDe} argument may be omitted,
!       in which case it will default to {\tt localDe=0}.
! \item [{[gridToFieldMap]}]
!       List with number of elements equal to 1.
!       The list elements map the dimension
!       of the {\tt locstream} to a dimension in the {\tt field} by
!       specifying the appropriate {\tt field} dimension index. The default is to
!       map the {\tt locstream}|s dimension against the lowest dimension of
!       the {\tt field} in sequence, i.e. {\tt gridToFieldMap} = (/1/).
!       The values of all {\tt gridToFieldMap} entries must be greater than or equal
!       to one and smaller than or equal to the {\tt field} rank.
!       The total ungridded dimensions in the {\tt field}
!       are the total {\tt field} dimensions less
!       the dimensions in
!       the {\tt grid}.  Ungridded dimensions must be in the same order they are
!       stored in the {\t field}.  
! \item [{[ungriddedLBound]}]
!       Lower bounds of the ungridded dimensions of the {\tt field}.
!       The number of elements in the {\tt ungriddedLBound} is equal to the number of ungridded
!       dimensions in the {\tt field}.  All ungridded dimensions of the
!       {\tt field} are also undistributed. When field dimension count is
!       greater than 1, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the {\tt field}.
! \item [{[ungriddedUBound]}]
!       Upper bounds of the ungridded dimensions of the {\tt field}.
!       The number of elements in the {\tt ungriddedUBound} is equal to the number of ungridded
!       dimensions in the {\tt field}.  All ungridded dimensions of the
!       {\tt field} are also undistributed. When field dimension count is
!       greater than 1, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the {\tt field}.
! \item [{[totalLBound]}]
!       The relative lower bounds of Fortran data array to be used
!       later in {tt ESMF\_FieldCreate} from {\tt ESMF\_LocStream} and Fortran data array.
!       This is an output variable from this user interface.
! \item [{[totalUBound]}]
!       The relative upper bounds of Fortran data array to be used
!       later in {tt ESMF\_FieldCreate} from {\tt ESMF\_LocStream} and Fortran data array.
!       This is an output variable from this user interface.
! \item [{[totalCount]}]
!       Number of elements need to be allocated for Fortran data array to be used
!       later in {tt ESMF\_FieldCreate} from {\tt ESMF\_LocStream} and Fortran data array.
!       This is an output variable from this user interface.
!
! \item[{[rc]}]
!     Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!EOPI

!  !Local Variables
    integer :: localrc
    type(ESMF_GeomBase) :: geombase

    ! Initialize
    localrc = ESMF_RC_NOT_IMPL
    if (present(rc)) rc = ESMF_RC_NOT_IMPL

    ESMF_INIT_CHECK_DEEP(ESMF_LocStreamGetInit,locstream,rc)

     ! Create GeomBase from LocStream
    geombase=ESMF_GeomBaseCreate(locstream,rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, ESMF_ERR_PASSTHRU, &
                                     ESMF_CONTEXT, rc)) return
 

    ! call into generic alloc bound calculation subroutine
    call ESMF_FieldGetGBAllocBounds(geombase, localDe, gridToFieldMap, &
        ungriddedLBound, ungriddedUBound, &
        totalLBound=totalLBound, totalUBound=totalUBound, &
        totalCount=totalCount, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
        ESMF_ERR_PASSTHRU, &
        ESMF_CONTEXT, rc)) return

    ! Destroy GeomBase
    call ESMF_GeomBaseDestroy(geombase, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
        ESMF_ERR_PASSTHRU, &
        ESMF_CONTEXT, rc)) return

    if (present(rc)) rc = ESMF_SUCCESS
    end subroutine ESMF_FieldGetLSAllocBounds


!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldGetMeshAllocBounds"
!BOP
! !IROUTINE: ESMF_FieldGet -  Get precomputed Fortran data array bounds

! !INTERFACE:
  ! Private name; call using ESMF_FieldGet()
    subroutine ESMF_FieldGetMeshAllocBounds(mesh, localDe, &
        gridToFieldMap, &
        ungriddedLBound, ungriddedUBound, &
        totalLBound, totalUBound, totalCount, rc)
    
! !ARGUMENTS:
    type(ESMF_Mesh), intent(inout) :: mesh     
    integer, intent(in), optional :: localDe
    integer, intent(in), optional :: gridToFieldMap(:)    
    integer, intent(in), optional :: ungriddedLBound(:)
    integer, intent(in), optional :: ungriddedUBound(:)
    integer, intent(out), optional :: totalLBound(:)
    integer, intent(out), optional :: totalUBound(:)
    integer, intent(out), optional :: totalCount(:)
    integer, intent(out), optional :: rc     

!
! !DESCRIPTION:
! Compute the lower and upper bounds of Fortran data array that can later
! be used in FieldCreate interface to create a {\tt ESMF\_Field} from a
! {\tt ESMF\_Mesh} and the Fortran data array. For an example and
! associated documentation using this method see Section 
! \ref{sec:field:usage:create_5dgrid_7dptr_2dungridded}.
!
! The arguments are:
! \begin{description}
! \item [mesh]
!       {\tt ESMF\_Mesh}.
! \item [{[localDe]}]
!       Local DE for which information is requested. {\tt [0,..,localDeCount-1]}.
!       For {\tt localDeCount==1} the {\tt localDe} argument may be omitted,
!       in which case it will default to {\tt localDe=0}.
! \item [{[gridToFieldMap]}]
!       List with number of elements equal to the
!       {\tt grid}|s dimCount.  The list elements map each dimension
!       of the {\tt grid} to a dimension in the {\tt field} by
!       specifying the appropriate {\tt field} dimension index. The default is to
!       map all of the {\tt grid}|s dimensions against the lowest dimensions of
!       the {\tt field} in sequence, i.e. {\tt gridToFieldMap} = (/1,2,3,.../).
!       The values of all {\tt gridToFieldMap} entries must be greater than or equal
!       to one and smaller than or equal to the {\tt field} rank.
!       It is erroneous to specify the same {\tt gridToFieldMap} entry
!       multiple times. The total ungridded dimensions in the {\tt field}
!       are the total {\tt field} dimensions less
!       the dimensions in
!       the {\tt grid}.  Ungridded dimensions must be in the same order they are
!       stored in the {\t field}.  
! \item [{[ungriddedLBound]}]
!       Lower bounds of the ungridded dimensions of the {\tt field}.
!       The number of elements in the {\tt ungriddedLBound} is equal to the number of ungridded
!       dimensions in the {\tt field}.  All ungridded dimensions of the
!       {\tt field} are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the {\tt field}.
! \item [{[ungriddedUBound]}]
!       Upper bounds of the ungridded dimensions of the {\tt field}.
!       The number of elements in the {\tt ungriddedUBound} is equal to the number of ungridded
!       dimensions in the {\tt field}.  All ungridded dimensions of the
!       {\tt field} are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the {\tt field}.
! \item [{[totalLBound]}]
!       The relative lower bounds of Fortran data array to be used
!       later in {tt ESMF\_FieldCreate} from {\tt ESMF\_Mesh} and Fortran data array.
!       This is an output variable from this user interface.
! \item [{[totalUBound]}]
!       The relative upper bounds of Fortran data array to be used
!       later in {tt ESMF\_FieldCreate} from {\tt ESMF\_Mesh} and Fortran data array.
!       This is an output variable from this user interface.
! \item [{[totalCount]}]
!       Number of elements need to be allocated for Fortran data array to be used
!       later in {tt ESMF\_FieldCreate} from {\tt ESMF\_Mesh} and Fortran data array.
!       This is an output variable from this user interface.
!
! \item[{[rc]}]
!     Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!EOPI

!  !Local Variables
    integer :: localrc
    type(ESMF_GeomBase) :: geombase

    ! Initialize
    localrc = ESMF_RC_NOT_IMPL
    if (present(rc)) rc = ESMF_RC_NOT_IMPL

    ESMF_INIT_CHECK_DEEP(ESMF_MeshGetInit,mesh,rc)

     ! Create GeomBase from Mesh
    geombase=ESMF_GeomBaseCreate(mesh,rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, ESMF_ERR_PASSTHRU, &
                                     ESMF_CONTEXT, rc)) return
 

    ! call into generic alloc bound calculation subroutine
    call ESMF_FieldGetGBAllocBounds(geombase, localDe, gridToFieldMap, &
        ungriddedLBound, ungriddedUBound, &
        totalLBound=totalLBound, totalUBound=totalUBound, &
        totalCount=totalCount, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
        ESMF_ERR_PASSTHRU, &
        ESMF_CONTEXT, rc)) return

    ! Destroy GeomBase
    call ESMF_GeomBaseDestroy(geombase, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
        ESMF_ERR_PASSTHRU, &
        ESMF_CONTEXT, rc)) return

    if (present(rc)) rc = ESMF_SUCCESS
    end subroutine ESMF_FieldGetMeshAllocBounds


!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldGetGBAllocBounds"
!BOPI
! !IROUTINE: ESMF_FieldGet -  Get precomputed Fortran data array bounds

! !INTERFACE:
  ! Private name; call using ESMF_FieldGet()
    subroutine ESMF_FieldGetGBAllocBounds(geombase, localDe, gridToFieldMap, &
        ungriddedLBound, ungriddedUBound, &
        maxHaloLWidth, maxHaloUWidth, &
        totalLBound, totalUBound, totalCount, rc)
    
! !ARGUMENTS:
    type(ESMF_GeomBase), intent(inout) :: geombase     
    integer, intent(in), optional :: localDe
    integer, intent(in), optional :: gridToFieldMap(:)    
    integer, intent(in), optional :: ungriddedLBound(:)
    integer, intent(in), optional :: ungriddedUBound(:)
    integer, intent(in), optional :: maxHaloLWidth(:)
    integer, intent(in), optional :: maxHaloUWidth(:)
    integer, intent(out), optional :: totalLBound(:)
    integer, intent(out), optional :: totalUBound(:)
    integer, intent(out), optional :: totalCount(:)
    integer, intent(out), optional :: rc     

!
! !DESCRIPTION:
! Compute the lower and upper bounds of Fortran data array that can later
! be used in FieldCreate interface to create a {\tt ESMF\_Field} from a
! {\tt ESMF\_Grid} and the Fortran data array. For an example and
! associated documentation using this method see Section 
! \ref{sec:field:usage:create_5dgrid_7dptr_2dungridded}.
!
! The arguments are:
! \begin{description}
! \item [geombase]
!       {\tt ESMF\_GeomBase}.
! \item [localDe]
!       The local DE number in its PET context to compute the bounds and counts
!       information based on the computational and exclusive bounds and counts 
!       information of the grid from that local DE in its PET context.
! \item [{[gridToFieldMap]}]
!       List with number of elements equal to the
!       {\tt grid}|s dimCount.  The list elements map each dimension
!       of the {\tt grid} to a dimension in the {\tt field} by
!       specifying the appropriate {\tt field} dimension index. The default is to
!       map all of the {\tt grid}|s dimensions against the lowest dimensions of
!       the {\tt field} in sequence, i.e. {\tt gridToFieldMap} = (/1,2,3,.../).
!       The values of all {\tt gridToFieldMap} entries must be greater than or equal
!       to one and smaller than or equal to the {\tt field} rank.
!       It is erroneous to specify the same {\tt gridToFieldMap} entry
!       multiple times. The total ungridded dimensions in the {\tt field}
!       are the total {\tt field} dimensions less
!       the dimensions in
!       the {\tt grid}.  Ungridded dimensions must be in the same order they are
!       stored in the {\t field}.  
! \item [{[ungriddedLBound]}]
!       Lower bounds of the ungridded dimensions of the {\tt field}.
!       The number of elements in the {\tt ungriddedLBound} is equal to the number of ungridded
!       dimensions in the {\tt field}.  All ungridded dimensions of the
!       {\tt field} are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the {\tt field}.
! \item [{[ungriddedUBound]}]
!       Upper bounds of the ungridded dimensions of the {\tt field}.
!       The number of elements in the {\tt ungriddedUBound} is equal to the number of ungridded
!       dimensions in the {\tt field}.  All ungridded dimensions of the
!       {\tt field} are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the {\tt field}.
! \item [{[maxHaloLWidth]}]
!       Lower bound of halo region.  The size of this array is the number
!       of dimensions in the {\tt grid}.  However, ordering of the elements
!       needs to be the same as they appear in the {\tt field}.  Values default
!       to 0.  If values for maxHaloLWidth are specified they must be reflected in
!       the size of the {\tt field}.  That is, for each gridded dimension the
!       {\tt field} size should be max( {\tt maxHaloLWidth} + {\tt maxHaloUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ). Although the halo operation is not
!       implemented, the {\tt minHaloLWidth} is checked for validity and stored
!       in preparation for the implementation of the halo method.
!       HALO OPERATION NOT IMPLEMENTED
! \item [{[maxHaloUWidth]}]
!       Upper bound of halo region.  The size of this array is the number
!       of dimensions in the {\tt grid}.  However, ordering of the elements
!       needs to be the same as they appear in the {\tt field}.  Values default
!       to 0.  If values for maxHaloUWidth are specified they must be reflected in
!       the size of the {\tt field}.  That is, for each gridded dimension the
!       {\tt field} size should max( {\tt maxHaloLWidth} + {\tt maxHaloUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ).  Although the halo operation is not
!       implemented, the {\tt maxHaloUWidth} is checked for validity and stored
!       in preparation for the implementation of the halo method. 
!       HALO OPERATION NOT IMPLEMENTED
! \item [{[totalLBound]}]
!       The relative lower bounds of Fortran data array to be used
!       later in {tt ESMF\_FieldCreate} from {\tt ESMF\_Grid} and Fortran data array.
!       This is an output variable from this user interface.
! \item [{[totalUBound]}]
!       The relative upper bounds of Fortran data array to be used
!       later in {tt ESMF\_FieldCreate} from {\tt ESMF\_Grid} and Fortran data array.
!       This is an output variable from this user interface.
! \item [{[totalCount]}]
!       Number of elements need to be allocated for Fortran data array to be used
!       later in {tt ESMF\_FieldCreate} from {\tt ESMF\_Grid} and Fortran data array.
!       This is an output variable from this user interface.
!
! \item[{[rc]}]
!     Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!EOPI

!  !Local Variables
    integer :: localrc

!   temporary local variables corresponding to input/output arguments
    integer, dimension(ESMF_MAXDIM)        :: l_g2fm, l_mhlw, l_mhuw
    integer, dimension(:), allocatable     :: l_uglb, l_ugub
    integer, dimension(:), allocatable     :: l_alb, l_aub, l_ac

!   internal local variables 
    integer, dimension(ESMF_MAXDIM)        :: ec, cc, dg2gm
    integer, dimension(ESMF_MAXDIM)        :: f2gm, gelb, geub, gclb, gcub
    logical, dimension(ESMF_MAXDIM)        :: flipflop
    integer                                :: forderIndex, i
    integer                                :: gridrank, arrayrank, uglb_size, ugub_size
    integer                                :: localDeCount, l_localDe


    ! Initialize
    localrc = ESMF_RC_NOT_IMPL
    if (present(rc)) rc = ESMF_RC_NOT_IMPL

    ESMF_INIT_CHECK_DEEP(ESMF_GeomBaseGetInit,geombase,rc)

    call ESMF_GeomBaseGet(geombase, localDeCount=localDeCount, &
      dimCount=gridrank, distgridToGridMap=dg2gm, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
        ESMF_ERR_PASSTHRU, &
        ESMF_CONTEXT, rc)) return

    ! default localDe    
    if(localDeCount .gt. 1 .and. (.not. present(localDe))) then
       call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &
          "localDe must be present when localDeCount is greater than 1", &
           ESMF_CONTEXT, rc)
       return
    endif 
    if(present(localDe)) then
        l_localDe = localDe
    else 
        l_localDe = 0
    endif

    call ESMF_GeomBaseGetPLocalDE(geombase, localDe=l_localDe, &
       exclusiveLBound=gelb, exclusiveUBound=geub, exclusiveCount=ec,  &
       computationalLBound=gclb, computationalUBound=gcub, computationalCount=cc, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
        ESMF_ERR_PASSTHRU, &
        ESMF_CONTEXT, rc)) return

    ! Validate input arguments
    if(present(gridToFieldMap) ) then
        if(size(gridToFieldMap) .ne. gridrank) then
           call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &
              "gridToFieldMap size must equal to grid dimension count", &
               ESMF_CONTEXT, rc)
           return
        endif 
    endif

    if(present(maxHaloLWidth) ) then
        if(size(maxHaloLWidth) .ne. gridrank) then
           call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &
              "maxHaloLWidth size must equal to grid dimension count", &
               ESMF_CONTEXT, rc)
           return
        endif 
    endif

    if(present(maxHaloUWidth) ) then
        if(size(maxHaloUWidth) .ne. gridrank) then
           call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &
              "maxHaloUWidth size must equal to grid dimension count", &
               ESMF_CONTEXT, rc)
           return
        endif 
    endif

    ! User must either provide both ungriddedLBound and ungriddedUBound
    ! with same size or don't specify either one of them. There is no
    ! suitable default value for unbounded variables, especially when
    ! the intent is to create a Field with a greater rank than Grid
    if(present(ungriddedLBound)) then
        uglb_size = size(ungriddedLBound)
    else 
        uglb_size = 0
    endif
    if(present(ungriddedUBound)) then
        ugub_size = size(ungriddedUBound)
    else
        ugub_size = 0
    endif

    if(uglb_size .ne. ugub_size) then
       call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &
          "ungriddedLBound and ungriddedUBound must have same size", &
           ESMF_CONTEXT, rc)
       return
    endif 
    if(uglb_size .ne. 0) then
        allocate(l_uglb(uglb_size), l_ugub(ugub_size))
        l_uglb(1:uglb_size) = ungriddedLBound(1:uglb_size)
        l_ugub(1:ugub_size) = ungriddedUBound(1:ugub_size)
    endif

    ! the result Field/array rank
    arrayrank = gridrank + uglb_size

    ! check argument validity
    if(present(totalLBound)) then
        if(size(totalLBound) .ne. arrayrank) then
           call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &
              "totalLBound size must equal to the desired array rank", &
               ESMF_CONTEXT, rc)
           return
        endif 
    endif
    if(present(totalUBound)) then
        if(size(totalUBound) .ne. arrayrank) then
           call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &
              "totalUBound size must equal to the desired array rank", &
               ESMF_CONTEXT, rc)
           return
        endif 
    endif
    if(present(totalCount)) then
        if(size(totalCount) .ne. arrayrank) then
           call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &
              "totalCount size must equal to the desired array rank", &
               ESMF_CONTEXT, rc)
           return
        endif 
    endif

    ! set up local gridToFieldMap
    if(present(gridToFieldMap)) then
        l_g2fm(1:size(gridToFieldMap)) = gridToFieldMap
    else
        do i = 1, ESMF_MAXDIM
            l_g2fm(i) = i
        enddo
    endif
    ! gridToFieldMap elements must be in range 1...fieldRank and unique  
    ! algorithm to check element uniqueness:  
    !   run time: O(ESMF_MAXDIM)  
    !   memory:   O(2*ESMF_MAXDIM)  
    !          or O(ESMF_MAXDIM+ESMF_MAXDIM/sizeof(integer)) with bitvector  
    flipflop = .false.  
    do i = 1, gridrank
       if(l_g2fm(i) .lt. 1 .and. l_g2fm(i) .gt. arrayrank) then  
           call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &   
                 "- gridToFieldMap element must be within range 1...array rank", &  
                   ESMF_CONTEXT, rc)   
           return  
       endif  
       if(flipflop(l_g2fm(i))) then  
           call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &   
                 "- gridToFieldMap element must be unique", &  
                   ESMF_CONTEXT, rc)   
           return  
       endif  
       flipflop(l_g2fm(i)) = .true.  
    enddo  

    ! At this point input arguments are validated
    ! allocate the return value arrays
    allocate(l_alb(arrayrank), l_aub(arrayrank), l_ac(arrayrank))
    l_mhlw = 0
    if(present(maxHaloLWidth)) then
        l_mhlw(1:gridrank) = maxHaloLWidth(1:gridrank)
    endif
    l_mhuw = 0
    if(present(maxHaloUWidth)) then
        l_mhuw(1:gridrank) = maxHaloUWidth(1:gridrank)
    endif

    ! First we compute the ungridded bounds:
    ! compute a reverse mapping from Field to Grid then
    ! compute ungridded Fortran array bounds
    f2gm = 0
    do i = 1, gridrank
        f2gm(l_g2fm(i)) = i
    enddo
    forderIndex = 1
    do i = 1, arrayrank
        ! if the i-th dimension is ungridded
        if(f2gm(i) .eq. 0) then
            l_alb(i) = l_uglb(forderIndex)
            l_aub(i) = l_ugub(forderIndex)
            l_ac(i)  = l_aub(i) - l_alb(i) + 1
            forderIndex = forderIndex + 1
        endif
    enddo

    ! Next compute the gridded bounds using the mapping
    ! from Field to Grid computed in last step
    forderIndex = 1
    do i = 1, arrayrank
        ! if i-th dimension is gridded
        if(f2gm(i) .gt. 0) then
            l_ac(i) = max(cc(f2gm(i))+l_mhlw(forderIndex)+l_mhuw(forderIndex), ec(f2gm(i)))
            l_alb(i) = min(gclb(f2gm(i)) - l_mhlw(forderIndex), gelb(f2gm(i)))
            l_aub(i) = l_alb(i) + l_ac(i) - 1
            forderIndex = forderIndex + 1
        endif
    enddo

    ! Prepare the return values
    if(present(totalLBound)) totalLBound(1:arrayrank) = l_alb(1:arrayrank)
    if(present(totalUBound)) totalUBound(1:arrayrank) = l_aub(1:arrayrank)
    if(present(totalCount))  totalCount(1:arrayrank)  = l_ac(1:arrayrank)

    ! deallocate temporary arrays
    if(uglb_size .ne. 0) then
        deallocate(l_uglb, l_ugub)
    endif
    deallocate(l_alb, l_aub, l_ac)

    if (present(rc)) rc = ESMF_SUCCESS
    end subroutine ESMF_FieldGetGBAllocBounds

end module ESMF_FieldGetMod
