% $Id: VM_desc.tex,v 1.9 2006/02/02 01:59:59 theurich Exp $

The {\tt ESMF\_VM} (Virtual Machine) class is a generic representation of hardware and system software resources. There is exactly one VM object per ESMF component, providing the execution environment for the component code. The VM object handles all resource management tasks of a component and provides a topological description of the underlying configuration of the compute resources used by the component. The basic elements of a VM are called PETs, which stands for Persistent Execution Threads.  These are equivalent to OS threads with a lifetime of at least that of the associated component. All VM functionality is expressed in terms of PETs. In the current version of ESMF a PET is equivalent to an MPI process. Future ESMF releases, however, will provide more flexibility on the PET level.

The resource management functions of the VM class come into play when a component creates sub-components. There are two parts to resource management, the parent and the child. When the parent component creates a child component its own VM object is provided to the {\tt ESMF\_GridCompCreate()} or {\tt ESMF\_CplCompCreate()} method. Optionally a {\tt petList} can be specified to limit the resources the parent gives to the child. The child on the other hand may specify - during its SetServices method - how it wants the inherited resources to be arranged in its own VM. All registered methods of the component will henceforth execute in the thus defined child VM. Notice that the SetServices routine, although part of the child component, executes {\em before} the child VM has been started up. Hence it runs within the parent VM context.

In addition to resource management and topological description the VM class offers the lowest level of ESMF communication methods. Data references in VM communication calls must be provided as raw, language specific, one-dimensional, contiguous data arrays, much like in MPI. In fact, the similarity between VM and MPI communication calls is striking and there are many equivalent point-to-point and collective communication calls. However, unlike MPI, future versions of ESMF will allow PETs to be POSIX threads within multi-threaded POSIX processes. The VM communications API is completely transparent with respect to the different natures of the PETs and provides a common interface to shared memory and message passing communications.
% Furthermore, the VM provides a more sophisticated non-blocking communication system. <-- This is not yet visible in the F90 API!
