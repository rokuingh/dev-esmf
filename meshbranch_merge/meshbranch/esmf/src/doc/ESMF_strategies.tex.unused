\section{Software Design Paradigms}
\label{sec:strategies}

Given the computational demands of Earth system modeling, the ESMF is by 
necessity complicated software running on complicated hardware.  However,
our goal is to develop a framework that is straightforward to understand and 
use, reasonable to maintain, and amenable to extension.  
To these ends, we are adopting an achitecture modularized in a  
systematic and intuitive way.  The ESMF combines elements of 
object-oriented design, component-based design, and software layering, 
complementary approaches for ordering and decomposing software that apply
at different scales.  Object-oriented design organizes software into families 
of related structures that include even 
small data elements and minor functions.  Component-based design addresses 
larger software elements that are consistently defined and that interact
in a prescribed manner.  By layering we mean roughly apportioning elements 
of a software system into a few levels of a calling hierarchy.
All of these are useful conceptual tools for designing, understanding, and
explaining the structure of ESMF.

\subsection{Object-Oriented Design}
\label{sec:oop}

The ESMF is being designed using object-oriented (OO) principles (e.g.,
\cite{booch, rumbaugh}).  OO design
is based on {\it classes}, which organize data, attributes, and associated 
operations into well-defined structures.  The OO approach distinguishes between 
the abstract concept of a class and an actual implementation or instance of the 
class, which is called an {\it object}.  The act of creating an actual instance
of a class, an {\it object}, is called {\it instantiation}.

\subsubsection{What is Object-Oriented Design?}

OO design is characterized by {\it encapsulation}, {\it inheritance}, and 
{\it polymorphism}.  Encapsulation means making data 
private to a particular class so that the underlying representation
can be changed or extended without changing the user interface to the class.
Inheritance allows specialized classes to inherit standard behavior from one
or more base
classes.  Polymorphism allows a single method to accept a variety of 
different argument lists when performing conceptually similar operations.  
Together these OO strategies help to organize and streamline codes, making 
them more flexible, maintainable, and extensible.  

The practice of OO design has grown to include the recognition of a family
of commonly occuring ``design patterns'' and strategies for using them 
effectively (e.g., \cite{alexandrescu, gof}.  For example, a widely
recognized design pattern relevant to ESMF is that of a {\bf mediator},
the generic equivalent of an Earth system coupler.  The role of a 
mediator object is to enhance reusability by preventing interacting objects 
in an application from referring to each other explicitly.  Eliminating 
context-dependent code from objects simplifies them and enables them to be 
reconfigured more easily.   It also simplifies the application as a whole, turning 
many-to-many interactions into one-to-many interactions.\footnote{This is a 
model of control flow and not data flow:  it doesn't imply that a 
mediator is necessarily a serial bottleneck in a parallel code!}  

\subsubsection{ESMF Classes}

The ESMF is being implemented in the C++ and FORTRAN languages, both of which support 
basic implementation of the OOP concepts outlined above (see the \htmladdnormallink{{\it ESMF 
Implementation Report}}{http://www.earthsystemmodeling.org/documents/IMPL_repdoc} \cite{bib:ESMFimplrep}
and other references, e.g. ~\cite{decyk97, decyk00}).  

The ESMF architecture is class-based, as described in Sections~\ref{sec:superclasses}, 
\ref{sec:fieldclasses}, and \ref{sec:utilclasses}.  Privacy descriptors 
implement encapsulation.  The modularity provided by classes facilitates reuse
and extensibility across the framework.  It also makes the system easier to 
understand by breaking up the functionality into discrete, well-defined segments.

We define a base class for all the objects in ESMF, as well as a base class 
from which all components will inherit.  See Sections~\ref{sec:Base} and 
\ref{sec:superclasses}, respectively, for further details.  These base
classes are important to the architecture, because they provide consistency
of behavior across the entire framework.  This makes the framework easier
to use, since a user can leverage knowledge gained by working with one
part of the framework to understand other parts.  For example, since all
objects will use a similar method to save their state, the user can learn it 
once and be done with it.

Overloaded functions, which are called generic interfaces in FORTRAN and 
are implemented in that language using interface blocks, are employed throughout 
ESMF.  Overloaded operations, in which an operator such as a plus sign can 
represent an addition method for derived types (in FORTRAN) or classes
(in C++), are also used throughout.  These approaches enhance ease of use since 
they reduce the number of individual interfaces the user must remember.  

Recognizing the relevance of design patterns to ESMF
is useful because the advantages and disadvantages of these patterns have
been analyzed extensively by the software engineering community.  For example,
one of the acknowledged drawbacks of the mediator pattern is that the mediator
itself may become a monolithic, excessively complex code that is difficult
to maintain.  By anticipating such issues we can work to avoid them.

\subsection{Component-Based Design}

Component architectures have proliferated in the commercial world, with
packages such as COM, CORBA, Enterprise Java Beans, and others enabling 
interoperability
of different software packages and different languages in a wide range
of domains (e.g. \cite{com, corba, javabeans}).  Component architectures have 
recently extended into the 
scientific domain through the Common Component Architecture (CCA) project, a 
Department of Energy effort to standardize science components using the same basic ideas. \cite{cca}
In this section we describe the features of component-based software 
architecture, then outline how the ESMF borrows from that model.

\subsubsection{What is Component-Based Design?}

In component-based design, applications are constructed using software entities 
called components, which are accessed only through {\it interfaces}.  A component
usually represents a fairly large chunk of code that is functionally related, such
as a land model or a dynamical core.  In the C-based languages in which virtually
all existing component-based systems are implemented, an interface is 
typically implemented as an array of function pointers.  Components usually have 
multiple interfaces, with each interface representing a collection of 
related methods.  In addition to components, component 
architectures must define a top-level control mechanism that can handle tasks 
such as scheduling and running components.  In the CCA, this is called the 
framework - a different usage of the word than we are accustomed to in ESMF.

CCA and other component-based architectures enable components to instantiate and run 
subcomponents.  This capability is very important to support system scalability.  
CCA does it through an interface, called {\tt BuilderServices}, that any component
can implement.  It allows components that possess the interface to instantiate other
components, run them, and direct them to communicate with each other.

One of the simplifying rules of the CCA architecture is that all inter-component 
calls exchange only local data.  For example,
if you wanted to transfer data between two CCA components A and B in a 
multi-processor, distributed memory system, you would need 
to define a third component C on the union of A and B's processors and perform
the data transfer entirely within component C.

Another feature common to component architectures is an Interface Definition 
Language (IDL).  This is a language-independent way to express 
interfaces.  \footnote{In practice IDLs tend to look a lot like Java.}  

\subsubsection{ESMF Components}

Component-based architecture is most relevant to ESMF at the superstructure level. 
The ESMF is based on those aspects of component-based design that
provide immediate benefits, are feasible to implement within the
timeframe of our project, and will facilitate compatibility with efforts
such as the CCA as those projects evolve.  

The ESMF component base class described in Section~\ref{sec:oop} defines a set 
of common and consistent attributes
and methods for components.  This enables a variety of components - with different functionality, from different sources, at both large scales and small - to be handled
in a coherent way and to reuse the same control, communication and utility
mechanisms.  It also provides a clear definition of ESMF components so that
project such as CCA can understand and support them.  

ESMF supports the concept of subcomponents.  In ESMF this is done simply
by allowing parent components to instantiate and run child components.

The ESMF, like CCA, requires that all inter-component calls exchange only
local data.  This greatly simplifies the architecture, without 
imposing undue restrictions on communication mechanisms within component
models or the ESMF.

There are also aspects of component-based design that we will not adopt.
IDLs require significant effort to implement and there is currently no
IDL which supports both the languages we require, FORTRAN and C++.  We see 
no pressing
reason to develop an IDL or to use ESMF resources to accelerate the development
of one.  We will continue to track the 
development of CCA's Scientific IDL (SIDL) and related
efforts such as Chasm \cite{rasmussen01}, as described in 
the {\it ESMF Implementation Report}.

\subsection{Layered Architecture}

The ESMF and the applications that use it will be layered.  Layering generally 
refers to a calling hierarchy, in which some pieces of the software are composed 
of and/or call other pieces.  This is true of most software systems, so 
saying simply that the ESMF is layered does not add much to our understanding.  
It is more useful to look at a number of layering strategies, 
and identify which of these apply to ESMF.

\subsubsection{Types of Layering}
\label{sec:layering}

We use the term {\it hardware layering} to refer to a strategy to encapsulate 
programming constructs and tools that reflect the structure of the underlying 
computing environment.  In hardware layering, a bottom layer typically includes 
vendor-specific constructs.  Middle layers may automatically 
handle standard operations, such as distributed transposes, that do not involve  
vendor-specific calls but still reflect the computer architecture.  At the highest
level, the user handles objects that represent the application 
domain and not the computing environment.  POOMA \cite{pooma} and FMS \cite{fms} are examples of frameworks
that employ hardware layering.  

Hardware layering is one form of {\it layering by generality}; general 
tools that can apply to many application domains are relegated to bottom layers, 
while domain-specific constructs are in top layers.  This paradigm is
common even in systems running on simple hardware architectures, where 
vendor-specific
constructs and other threats to portability and ease of use are not a concern.
Its pervasiveness is simply a reflection of the fact that general tools 
enable a variety of applications to be built upon them.

An alternative view of layers results from combining multiple modes of parallelism 
in a single application.  In Earth system models individual model 
components typically run as data parallel 
operations.  When a number of 
these are combined in an application such as a coupled climate model, individual 
components or sets of individual components may run as task 
parallel operations 
on non-overlapping sets of nodes.  Data parallel operations can be viewed
as residing in a lower layer, while the task parallel constructs that 
synchronize and referee data transfers occur at a higher level. We refer to 
this as {\it task layering}.

Closely related to task layering is the {\it data structure layering} used 
in the WRF model.  The top ``driver'' layer 
in this approach specifies data decompositions and controls
the flow of execution.  The lowest ``model'' layer consists of physics routines that
operate on simple arrays.  The middle ``mediation''layer is responsible for 
extracting these simple arrays from the data structures in the driver.
While data structure layering places domain-specific constructs in lower layers, hardware 
layering place domain-specific constructs in the upper layers.  

Different layering strategies can be alternative ways of viewing the same
software; a coupled model can without inconsistency 
be developed both as an application with task layering and with hardware 
layering.  However, some layering strategies are more difficult to reconcile. 
Layering by generality encourages application developers to employ high-level 
data structures in the computational portions of their application codes.  In 
contrast, data structure layering prohibits the application developer from 
incorporating advanced data structures into application codes; instead the
user programs computations using simple arrays.  The latter approach can 
simplify coding
when computations are free from communications.  When communications or other
operations that reflect hardware are required within model computations, coding
model calcuations using more complex data objects can encapsulate some of 
these details and simplify codes.  Overture \cite{overture} is an example of a framework 
that provides such complex data objects. 

\subsubsection{ESMF Layers}

The ESMF utility infrastructure and superstructure utilize hardware layering, 
and multi-component applications running under ESMF can be viewed as 
being task layered.  The ESMF ``sandwich'' diagram presented in Figure~\ref{fig:sandwich} is a combination 
of both strategies.  The bottom layer utilities encapsulate 
machine-specific constructs and also includes general tools useful throughout
the framework.  The next layer of data objects representing
fields and grids reflects some hardware details but is portable and increasingly
geared to application constructs.  The 
superstructure allows component models to execute in either a data or task 
parallel fashion.  It also allows the user to work with constructs that are part
of the application rather than the computing domain.  

The ESMF does not place restrictions on the computational layering 
strategy used within user-supplied component models.  








