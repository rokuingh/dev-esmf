% $Id: ESMF_options.tex,v 1.31 2008/09/12 22:35:44 w6ws Exp $

\section{Global Options and Parameters}

\subsection{Flags}

\subsubsection{ESMF\_AllocFlag}
\label{opt:allocflag}
{\sf DESCRIPTION:\\}  
Indicates whether to allocate data or not.

Valid values are:
\begin{description}
\item [ESMF\_ALLOC]
      Allocate data. 
\item [ESMF\_NO\_ALLOC]
      Do not allocate data at this time. 
\end{description}

\subsubsection{ESMF\_BlockingFlag}
\label{opt:blockingflag}
{\sf DESCRIPTION:\\}  
Indicates method blocking behavior and PET synchronization for communication
calls as well as Component initialize, run and finalize methods.

For communication calls the {\tt ESMF\_BLOCKING} and {\tt ESMF\_NONBLOCKING}
modes provide behavior that is practically identical to the blocking and
non-blocking communication calls familiar to MPI users.

The details of how the blocking mode setting affects Component methods are
more complex as a consequence of the fact that ESMF Components can be run in
threaded or non-threaded mode. However, in the default, non-threaded case, where
an ESMF application runs as a pure MPI program, most of the complexity is
removed.

See the {\bf VM} item in \ref{sec:spatialclasses} for an
explanation of the PET and VAS concepts used in the following
descriptions.
         
Valid values are:
\begin{description}

\item [ESMF\_BLOCKING]
         {\em Communication calls:} The called method will block until all
         (PET-)local operations are complete. After the return of a blocking
         communication method it is safe to modify or use all participating
         local data.
         
         {\em Component calls:} The called method will block until all PETs of
         the VM have completed the operation.
         
         For a non-threaded, pure MPI
         component the behavior is identical to calling a barrier before 
         returning from the method. Generally this kind of rigid 
         synchronization is not the desirable mode of operation for an MPI
         application, but may be useful for application debugging.
         In the opposite case, where all PETs of the component are running as
         threads in shared memory, i.e. in a single VAS, strict synchronization
         of all PETs is required to prevent race conditions.

\item [ESMF\_VASBLOCKING]
         {\em Communication calls:} Not available for communication calls.
         
         {\em Component calls:} The called method will block each PET until
         all operations in the PET-local VAS have completed. 
         
         This mode is a combination of {\tt ESMF\_BLOCKING} and
         {\tt ESMF\_NONBLOCKING} modes. It provides a default setting 
         that leads to the typically desirable behavior for pure MPI 
         components as well as those that share address spaces between PETs.
         
         For a non-threaded, pure MPI component each PET returns
         independent of the other PETs. This is generally the expected 
         behavior in the pure MPI case where calling into a component method is
         practically identical to a subroutine call without extra 
         synchronization between the processes.
         
         In the case where some PETs of the component are running as
         threads in shared memory {\tt ESMF\_VASBLOCKING} becomes identical
         to {\tt ESMF\_BLOCKING} within thread groups, to prevent race
         conditions, while there is no synchronization between the thread
         groups.
         
\item [ESMF\_NONBLOCKING]
         {\em Communication calls:} The called method will not block but 
         returns immediately after initiating the requested operation. It is
         unsafe to modify or use participating local data before all local
         operations have completed. Use the {\tt ESMF\_VMCommWait()} or
         {\tt ESMF\_VMCommQueueWait()} method to block the local PET until
         local data access is safe again. 

         {\em Component calls:} The behavior of this mode is fundamentally
         different for threaded and non-threaded components,
         independent on whether the components use shared memory or not.
         The {\tt ESMF\_NONBLOCKING} mode is the most complex mode for
         calling component methods and should only be used if the extra
         control, described below, is absolutely necessary.
         
         For non-threaded components (the ESMF default)
         calling a component method with {\tt ESMF\_NONBLOCKING}
         is identical to calling it with {\tt ESMF\_VASBLOCKING}. However,
         different than for {\tt ESMF\_VASBLOCKING}, a call to
         {\tt ESMF\_GridCompWait()} or {\tt ESMF\_CplCompWait()} is
         required in order to deallocate memory internally allocated for the
         {\tt ESMF\_NONBLOCKING} mode.
         
         For threaded components the calling PETs
         of the parent component will not be blocked and return immediately
         after initiating the requested child component method. In this
         scenario parent and child components will run concurrently in
         identical VASs. This is the most complex mode of operation.
         It is unsafe to modify or use VAS local data that
         may be accessed by concurrently running components until the child
         component method has completed. Use the appropriate
         {\tt ESMF\_GridCompWait()} or {\tt ESMF\_CplCompWait()} method to
         block the local parent PET until the child component method has
         completed in the local VAS.
         

\end{description}

\subsubsection{ESMF\_ContextFlag}
\label{opt:contextflag}
{\sf DESCRIPTION:\\}  
Indicates the type of VM context in which a component is executing.

Valid values are:
\begin{description}

\item [ESMF\_CHILD\_IN\_NEW\_VM]
         The component is running in its own, separate VM context. Resources
         are inherited from the parent but can be arranged to fit the
         component's requirements.
\item [ESMF\_CHILD\_IN\_PARENT\_VM]
         The component uses the parent's VM for resource management. Compared
         to components that use their own VM context components that run in the
         parent's VM context are more light-weight with respect to the overhead
         of calling into their initialize, run and finalize methods.
         Furthermore, VM-specific properties remain unchanged when going from
         the parent component to the child component. These properties include
         the MPI communicator, the number of PETs, the PET labeling, 
         communication attributes, threading-level.

\end{description}

\subsubsection{ESMF\_CopyFlag}
\label{opt:copyflag}
{\sf DESCRIPTION:\\}
Indicates whether to reference a data item or make a copy of it.

Valid values are:
\begin{description}
\item [ESMF\_DATA\_COPY]
      Copy the data item to another buffer.
\item [ESMF\_DATA\_REF]
      Reference the data item.
\end{description}

\subsubsection{ESMF\_DefaultFlag}
\label{opt:defaultflag}
{\sf DESCRIPTION:\\}
Indicates whether to use defaults or not.

Valid values are:
\begin{description}
\item [ESMF\_USE\_DEFAULTS]
      Use default values where possible.
\item [ESMF\_NO\_DEFAULTS]
      Don't use any default values.
\end{description}

\subsubsection{ESMF\_DecompFlag}
\label{opt:decompflag}
{\sf DESCRIPTION:\\}
Indicates how DistGrid elements are decomposed over DEs.

Valid values are:
\begin{description}
\item [ESMF\_DECOMP\_CYCLIC]
      Decompose elements cyclically across DEs.
\item [ESMF\_DECOMP\_DEFAULT]
      Use default decomposition behavior. Currently equal to 
      {\tt ESMF\_DECOMP\_HOMOGEN}.
\item [ESMF\_DECOMP\_HOMOGEN]
      Decompose elements as homogenously as possible across DEs. The maximum 
      difference in number of elements per DE is 1, with the extra elements on
      the lower DEs.
\item [ESMF\_DECOMP\_RESTFIRST]
      Divide elements over DEs. Assign the rest of this division to the first
      DE.
\item [ESMF\_DECOMP\_RESTLAST]
      Divide elements over DEs. Assign the rest of this division to the last DE.
\end{description}

\subsubsection{ESMF\_IndexFlag}
\label{opt:indexflag}
{\sf DESCRIPTION:\\}
Indicates whether index is local (per DE) or global (per object).

Valid values are:
\begin{description}
\item [ESMF\_INDEX\_DELOCAL]
      Refers to indices on the local DE.
\item [ESMF\_INDEX\_GLOBAL]
      Refers to object-wide indices.
\end{description}

\subsubsection{ESMF\_NeededFlag}
\label{opt:neededflag}
{\sf DESCRIPTION:\\}
Specifies whether or not a data item is needed for a 
particular application configuration.  Used in {\tt ESMF\_State}.

Valid values are:
\begin{description}
   \item [ESMF\_NEEDED] 
         Data is needed.
   \item [ESMF\_NOTNEEDED]
         Data is not needed.
\end{description}

\subsubsection{ESMF\_ReadyFlag}
\label{opt:readyflag}
{\sf DESCRIPTION:\\}
Specifies whether a data item is ready to read or write.

Valid values are:
\begin{description}
   \item [ESMF\_READYTOREAD] 
         Data is ready to read.
   \item [ESMF\_READYTOWRITE]
         Data is ready to write.
   \item [ESMF\_NOTREADY]
         Data is not ready.
\end{description}

\subsubsection{ESMF\_ReduceFlag}
\label{opt:reduceflag}
{\sf DESCRIPTION:\\}
Indicates reduce operation to a {\tt Reduce()} method.

Valid values are:
\begin{description}
   \item [ESMF\_SUM]
         Use arithmetic sum to add all data elements.
   \item [ESMF\_MIN]
         Determine the minimum of all data elements.
   \item [ESMF\_MAX]
         Determine the maximum of all data elements.
\end{description}

\subsubsection{ESMF\_RegionFlag}
\label{opt:regionflag}
{\sf DESCRIPTION:\\}
Specifies various regions in the data layout of an Array or Field object.

Valid values are:
\begin{description}
\item [ESMF\_REGION\_TOTAL]
      Total allocated memory.
\item [ESMF\_REGION\_SELECT]
      Region of operation-specific elements.
\item [ESMF\_REGION\_EMPTY]
      The empty region contains no elements.
\end{description}

\subsubsection{ESMF\_ReqForRestartFlag}
\label{opt:reqforrestartflag}
{\sf DESCRIPTION:\\}
Specifies whether a data item is necessary for restart.

Valid values are:
\begin{description}
   \item [ESMF\_REQUIRED\_FOR\_RESTART] 
         Data is required for restart.
   \item [ESMF\_NOTREQUIRED\_FOR\_RESTART]
         Data is not required for restart.
\end{description}

\subsubsection{ESMF\_Status}
\label{opt:status}
{\sf DESCRIPTION:\\}
This is a general object status flag used throughout the
framework.

Valid values are:
\begin{description}
   \item [ESMF\_STATUS\_UNINIT] 
         Object is uninitialized.
   \item [ESMF\_STATUS\_READY]
         Object is ready for use.
   \item [ESMF\_STATUS\_UNALLOCATED]
         Object has not yet been allocated.
   \item [ESMF\_STATUS\_ALLOCATED]
         Object has been allocated.
   \item [ESMF\_STATUS\_BUSY]
         Object is not able to respond.
   \item [ESMF\_STATUS\_INVALID]
         Object is invalid.
\end{description}


\subsubsection{ESMF\_ValidFlag}
\label{opt:validflag}
{\sf DESCRIPTION:\\}
Specifies whether a data item contains valid data.

Valid values are:
\begin{description}
   \item [ESMF\_VALID] 
         Data is ready to read.
   \item [ESMF\_INVALID]
         Data is ready to write.
   \item [ESMF\_NOTREADY]
         Data is not ready.
\end{description}


\subsection{Parameters}

\subsubsection{ESMF\_TypeKind}
\label{opt:typekind}

{\sf DESCRIPTION:\\}
Supported ESMF type and kind combinations.   
This is an ESMF derived type used for arguments to subroutines 
and functions that specify or query a data precision and type.
These values cannot be used when declaring variables; see the next 
section on Fortran Kinds for that.

Valid values are:
\begin{description}
\item [ESMF\_TYPEKIND\_I1]
      1 byte integer.
\item [ESMF\_TYPEKIND\_I2]
      2 byte integer.
\item [ESMF\_TYPEKIND\_I4]
      4 byte integer.
\item [ESMF\_TYPEKIND\_I8]
      8 byte integer.
\item [ESMF\_TYPEKIND\_R4]
      4 byte real.
\item [ESMF\_TYPEKIND\_R8]
      8 byte real.
\end{description}

\subsubsection{Fortran Kinds}

{\sf DESCRIPTION:\\}
These are integer parameters of the proper type to be
used when declaring variables with a specific precision 
in Fortran syntax.  For example:
\begin{verbatim}
 integer(ESMF_KIND_I4) :: myintegervariable
 real(ESMF_KIND_R4) :: myrealvariable
\end{verbatim}
The Fortran 90 standard does not mandate what numeric values
correspond to actual number of bytes allocated for the
various kinds, so these are defined by ESMF to be correct across
the different supported Fortran 90 compilers.   Note that not
all compilers support every kind listed below; in particular
1 and 2 byte integers can be problematic.

Valid values are:
\begin{description}
\item [ESMF\_KIND\_I1]
      1 byte integer.
\item [ESMF\_KIND\_I2]
      2 byte integer.
\item [ESMF\_KIND\_I4]
      4 byte integer.
\item [ESMF\_KIND\_I8]
      8 byte integer.
\item [ESMF\_KIND\_R4]
      4 byte real.
\item [ESMF\_KIND\_R8]
      8 byte real.
\item [ESMF\_KIND\_C8]
      8 byte character.
\item [ESMF\_KIND\_C16]
      16 byte character.
\end{description}

\subsubsection{ESMF Version}

{\sf DESCRIPTION:\\}
The following parameters are available to allow detection of the
version of ESMF in use.
\begin{description}
\item [ESMF\_MAJOR\_VERSION]
      Integer parameter with the major version number (e.g., 3 for v3.1.0)
\item [ESMF\_MINOR\_VERSION]
      Integer parameter with the minor version number (e.g., 1 for v3.1.0)
\item [ESMF\_REVISION]
      Integer parameter with the revision number (e.g., 0 for v3.1.0)
\item [ESMF\_PATCHLEVEL]
      Integer parameter with the patch level of a specific revision (e.g., 2 for v3.1.0rp2)
\item [ESMF\_VERSION\_STRING]
      Character string parameter describing the release (e.g., "3.1.0rp2")
\end{description}





